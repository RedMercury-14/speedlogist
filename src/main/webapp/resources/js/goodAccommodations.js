import { AG_GRID_LOCALE_RU } from './AG-Grid/ag-grid-locale-RU.js'
import { dateComparator, dateValueFormatter, gridColumnLocalState, gridFilterLocalState, ResetStateToolPanel } from './AG-Grid/ag-grid-utils.js'
import { snackbar } from './snackbar/snackbar.js'
import { dateHelper, debounce, disableButton, enableButton, getData, hideLoadingSpinner, isAdmin, isOrderSupport, showLoadingSpinner } from './utils.js'
import { bootstrap5overlay } from './bootstrap5overlay/bootstrap5overlay.js'
import { uiIcons } from './uiIcons.js'
import { ajaxUtils } from './ajaxUtils.js'
import { editProductControlUrl, getAllProductControlUrl, loadProductControlExcelUrl } from './globalConstants/urls.js'

const PAGE_NAME = 'goodAccommodations'
const LOCAL_STORAGE_KEY = `AG_Grid_settings_to_${PAGE_NAME}`
const DATES_KEY = `searchDates_to_${PAGE_NAME}`

const token = $("meta[name='_csrf']").attr("content")
const role = document.querySelector('#role').value

const debouncedSaveColumnState = debounce(saveColumnState, 300)
const debouncedSaveFilterState = debounce(saveFilterState, 300)

const rowClassRules = {
	'grey-row': params => params.data && params.data.status === 10,
	'red-row': params => params.data && params.data.status === 30,
}

const columnDefs = [
	{
		headerName: "‚Ññ", field: "idGoodAccommodation",
		sort: "desc", minWidth: 60, flex: 1,
	},
	{ headerName: "–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞", field: "productCode", },
	{ headerName: "–®—Ç—Ä–∏—Ö–∫–æ–¥", field: "barcode", },
	{ headerName: "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞", field: "goodName", flex: 4, },
	{ headerName: "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–Ω–æ–π –≥—Ä.", field: "productGroup", flex: 8, },
	{
		headerName: "–°–∫–ª–∞–¥—ã", field: "stocksToView",
		cellClass: "px-2 text-center font-weight-bold",
	},
	{
		headerName: "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", field: "dateCreate",
		valueFormatter: dateValueFormatter,
		comparator: dateComparator,
		filterParams: { valueFormatter: dateValueFormatter, },
	},
	{
		headerName: "–°—Ç–∞—Ç—É—Å", field: "status",
		cellClass: "px-2 text-center font-weight-bold",
		valueFormatter: getStatusToView,
		filterParams: { valueFormatter: getStatusToView, },
	},
	{ headerName: "–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä", field: "initiatorName", },
	{ headerName: "Email –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞", field: "initiatorEmail", },
]
const gridOptions = {
	columnDefs: columnDefs,
	rowClassRules: rowClassRules,
	defaultColDef: {
		headerClass: 'px-2 font-weight-bold',
		cellClass: 'px-2 text-center',
		flex: 2,
		minWidth: 100,
		resizable: true,
		suppressMenu: true,
		sortable: true,
		filter: true,
		floatingFilter: true,
		wrapText: true,
		autoHeight: true,
		wrapHeaderText: true,
		autoHeaderHeight: true,
		enableRowGroup: true,
	},
	animateRows: true,
	suppressDragLeaveHidesColumns: true,
	suppressRowClickSelection: true,
	enableBrowserTooltips: true,
	localeText: AG_GRID_LOCALE_RU,
	onSortChanged: debouncedSaveColumnState,
	onColumnResized: debouncedSaveColumnState,
	onColumnMoved: debouncedSaveColumnState,
	onColumnVisible: debouncedSaveColumnState,
	onColumnPinned: debouncedSaveColumnState,
	getContextMenuItems: getContextMenuItems,
	getRowId: (params) => params.data.idGoodAccommodation,
	defaultExcelExportParams: {
		processCellCallback: ({ value, formatValue }) => formatValue(value)
	},
	sideBar: {
		toolPanels: [
			{
				id: 'columns',
				labelDefault: 'Columns',
				labelKey: 'columns',
				iconKey: 'columns',
				toolPanel: 'agColumnsToolPanel',
				toolPanelParams: {
					suppressRowGroups: true,
					suppressValues: true,
					suppressPivots: true,
					suppressPivotMode: true,
				},
			},
			{
				id: 'filters',
				labelDefault: 'Filters',
				labelKey: 'filters',
				iconKey: 'filter',
				toolPanel: 'agFiltersToolPanel',
			},
			{
				id: 'resetState',
				iconKey: 'menu',
				labelDefault: '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫',
				toolPanel: ResetStateToolPanel,
				toolPanelParams: {
					localStorageKey: LOCAL_STORAGE_KEY,
				},
			},
		],
	},
}


document.addEventListener('DOMContentLoaded', async () => {
	const gridDiv = document.querySelector('#myGrid')
	renderTable(gridDiv, gridOptions)
	restoreColumnState()

	const data = await getGoodAccommodationsData()
	updateTable(gridOptions, data)

	editProductControlForm.addEventListener('submit', editProductControlFormSubmitHandler)
	sendExcelForm.addEventListener('submit', sendExcelFormHandler)

	$('#editProductControlModal').on('hidden.bs.modal', (e) => {
		editProductControlForm.reset()
	})

})


// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —ç–∫—Å–µ–ª—å
function sendExcelFormHandler(e) {
	e.preventDefault()

	if (!isAdmin(role)) return

	const submitButton = e.submitter
	const file = new FormData(e.target)

	showLoadingSpinner(submitButton)
	disableButton(submitButton)

	ajaxUtils.postMultipartFformData({
		url: loadProductControlExcelUrl,
		data: file,
		successCallback: async (res) => {
			hideLoadingSpinner(submitButton, '–ó–∞–≥—Ä—É–∑–∏—Ç—å')
			enableButton(submitButton)

			if (res.status === '200') {
				const data = await getGoodAccommodationsData()
				updateTable(gridOptions, data)
				snackbar.show('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
				e.target.reset()
				$(`#sendExcelModal`).modal('hide')
				return
			}

			if (res.status === '100') {
				const errorMessage = res.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö'
				snackbar.show(errorMessage)
				return
			}
		},
		errorCallback: () => {
			hideLoadingSpinner(submitButton, '–ó–∞–≥—Ä—É–∑–∏—Ç—å')
			enableButton(submitButton)
		}
	})
}
// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
function editProductControlFormSubmitHandler(e) {
	e.preventDefault()

	const formData = new FormData(e.target)
	const data = Object.fromEntries(formData)
	console.log("üöÄ ~ editProductControlFormSubmitHandler ~ data:", data)
	// const payload = {
	// 	goodId: Number(data.goodId),
	// 	stock: Number(data.stock)
	// }

	// const timeoutId = setTimeout(() => bootstrap5overlay.showOverlay(), 300)

	// ajaxUtils.postJSONdata({
	// 	token,
	// 	url: editProductControlUrl,
	// 	data: payload,
	// 	successCallback: async (res) => {
	// 		clearTimeout(timeoutId)
	// 		bootstrap5overlay.hideOverlay()

	// 		if (res.status === '200') {
	// 			const data = await getGoodAccommodationsData()
	// 			updateTable(gridOptions, data)
	// 			$('#editProductControlModal').modal('hide')
	// 			res.message && snackbar.show(res.message)
	// 			return
	// 		}

	// 		if (res.status === '100') {
	// 			const message = res.message ? res.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
	// 			snackbar.show(message)
	// 			return
	// 		}
	// 	},
	// 	errorCallback: () => {
	// 		clearTimeout(timeoutId)
	// 		bootstrap5overlay.hideOverlay()
	// 	}
	// })
}

function editProductControl(payload) {
	const timeoutId = setTimeout(() => bootstrap5overlay.showOverlay(), 300)

	ajaxUtils.postJSONdata({
		url: editProductControlUrl,
		data: payload,
		successCallback: async (res) => {
			clearTimeout(timeoutId)
			bootstrap5overlay.hideOverlay()

			if (res.status === '200') {
				console.log(res)

				const data = res.object
				const productControl = mapCallback(data)
				updateTableRow(gridOptions, productControl)
				res.message && snackbar.show(res.message)
				return
			}

			if (res.status === '100') {
				const message = res.message ? res.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
				snackbar.show(message)
				return
			}
		},
		errorCallback: () => {
			clearTimeout(timeoutId)
			bootstrap5overlay.hideOverlay()
		}
	})
}

// –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function getGoodAccommodationsData() {
	try {
		const url = `${getAllProductControlUrl}`
		const res = await getData(url)
		return res && res.objects ? res.objects : []
	} catch (error) {
		console.error(error)
		snackbar.show('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')
	}
}

// –º–µ—Ç–æ–¥—ã —Ç–∞–±–ª–∏—Ü—ã
function renderTable(gridDiv, gridOptions) {
	new agGrid.Grid(gridDiv, gridOptions)
	gridOptions.api.setRowData([])
	gridOptions.api.showLoadingOverlay()
}
function updateTable(gridOptions, data) {
	if (!data || !data.length) {
		gridOptions.api.setRowData([])
		gridOptions.api.showNoRowsOverlay()
		return
	}

	const mappingData = getMappingData(data)
	gridOptions.api.setRowData(mappingData)
	gridOptions.api.hideOverlay()
}
function getMappingData(data) {
	return data.map(mapCallback)
}
function mapCallback(item) {
	const stocksToView = item.stocks ? item.stocks.split(';').filter(Boolean).join(', ') : ''
	return {
		...item,
		stocksToView,
	};
}
function getContextMenuItems (params) {
	const rowNode = params.node
	if (!rowNode) return []

	const status = rowNode.data.status

	const items = [
		{
			name: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
			disabled: (!isAdmin(role) && !isOrderSupport(role)) || status === 20,
			action: () => {
				confirmProductControl(rowNode.data)
			},
			icon: uiIcons.check,
		},
		{
			name: "–û—Ç–º–µ–Ω–∏—Ç—å",
			disabled: (!isAdmin(role) && !isOrderSupport(role)) || status === 30,
			action: () => {
				cancelProductControl(rowNode.data)
			},
			icon: uiIcons.trash,
		},
		{
			name: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤",
			disabled: (!isAdmin(role) && !isOrderSupport(role)),
			action: () => {
				editStocks(rowNode.data)
			},
			icon: uiIcons.pencil,
		},
		// {
		// 	name: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
		// 	disabled: (!isAdmin(role) && !isOrderSupport(role)),
		// 	action: () => {
		// 		openEditProductControlForm(rowNode.data)
		// 	},
		// 	icon: uiIcons.pencil,
		// },
		"separator",
		{
			name: "–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫",
			action: () => {
				gridColumnLocalState.resetState(params, LOCAL_STORAGE_KEY)
			},
		},
		{
			name: `–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤`,
			action: () => {
				gridFilterLocalState.resetState(params, LOCAL_STORAGE_KEY)
			},
		},
		"separator",
		"excelExport"
	]

	return items
}

// —Å—Ç–∞—Ç—É—Å—ã —Å—Ç—Ä–æ–∫
function getStatusToView(params) {
	const status = params.value
	switch (status) {
		case 10:
			return "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è";
		case 20:
			return "–î–µ–π—Å—Ç–≤—É–µ—Ç";
		case 30:
			return "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω";
		default:
			return `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å (${status})`;
	}
}

// –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
async function confirmProductControl(rowData) {
	const payload = {
		idGoodAccommodation: rowData.idGoodAccommodation,
		barcode: rowData.barcode,
		goodName: rowData.goodName,
		productCode: rowData.productCode,
		productGroup: rowData.productGroup,
		status: 20,
		stocks: rowData.stocks,
	}

	editProductControl(payload)
}
// –æ—Ç–º–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª–∞
async function cancelProductControl(rowData) {
	const payload = {
		idGoodAccommodation: rowData.idGoodAccommodation,
		barcode: rowData.barcode,
		goodName: rowData.goodName,
		productCode: rowData.productCode,
		productGroup: rowData.productGroup,
		status: 30,
		stocks: rowData.stocks,
	}

	editProductControl(payload)
}
// –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞
async function editStocks(rowData) {
	// –Ω–æ–º–µ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤ –æ—Ç 2 –¥–æ 5 —Ü–∏—Ñ—Ä —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
	const regex = /^(?!.*\b0\d{1,4}\b)\b[1-9]\d{1,4}\b(?:,\b[1-9]\d{1,4}\b)*$/

	const stocksToView = rowData.stocksToView.replaceAll(' ','')
	const productCode = rowData.productCode

	const value = prompt(
		`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∫–æ–¥–æ–º ${productCode}. `
		+ `–î–ª—è —É–∫–∞–∑–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∫–ª–∞–¥–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ó–ê–ü–Ø–¢–£–Æ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–∞):`
		+ `\n–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${stocksToView}`
	)

	if (!value) return
	if (!regex.test(value)) {
		snackbar.show('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–±–µ–∑ –ø—Ä–æ–±–µ–ª–∞).')
		return
	}

	let newStocks = value.replaceAll(',', ';')
	newStocks = ';' + newStocks + ';'

	const payload = {
		idGoodAccommodation: rowData.idGoodAccommodation,
		barcode: rowData.barcode,
		goodName: rowData.goodName,
		productCode: rowData.productCode,
		productGroup: rowData.productGroup,
		status: rowData.status,
		stocks: newStocks,
	}

	editProductControl(payload)
}

// —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
function openEditProductControlForm(rowData) {
	setDataToForm(rowData)
	$('#editProductControlModal').modal('show')
}

// –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function setDataToForm(data) {
	editProductControlForm.idGoodAccommodation.value = data.idGoodAccommodation ? data.idGoodAccommodation : ''
	editProductControlForm.dateCreate.value = data.dateCreate ? data.dateCreate : ''
	editProductControlForm.status.value = data.status ? data.status : ''
	editProductControlForm.initiatorName.value = data.initiatorName ? data.initiatorName : ''
	editProductControlForm.initiatorEmail.value = data.initiatorEmail ? data.initiatorEmail : ''

	// –∑–∞–ø–æ–ª–Ω—è–µ–º –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è
	editProductControlForm.productCode.value = data.productCode ? data.productCode : ''
	editProductControlForm.barcode.value = data.barcode ? data.barcode : ''
	editProductControlForm.goodName.textContent = data.goodName ? data.goodName : ''
	editProductControlForm.productGroup.textContent = data.productGroup ? data.productGroup : ''
	editProductControlForm.stocks.value = data.stocksToView ? data.stocksToView.replaceAll(' ','') : ''
}

// —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫
function saveColumnState() {
	gridColumnLocalState.saveState(gridOptions, LOCAL_STORAGE_KEY)
}
function restoreColumnState() {
	gridColumnLocalState.restoreState(gridOptions, LOCAL_STORAGE_KEY)
}

// —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
function saveFilterState() {
	gridFilterLocalState.saveState(gridOptions, LOCAL_STORAGE_KEY)
}
function restoreFilterState() {
	gridFilterLocalState.restoreState(gridOptions, LOCAL_STORAGE_KEY)
}

// –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
function showMessageModal(message) {
	const messageContainer = document.querySelector('#messageContainer')
	messageContainer.innerHTML = message
	$('#displayMessageModal').modal('show')
}


function updateTableRow(gridOptions, rowData) {
	gridOptions.api.applyTransactionAsync(
		{ update: [ rowData ] }
	)
}