package by.base.main.util.bots;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Date;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import by.base.main.controller.MainController;
import by.base.main.model.TGUser;
import by.base.main.service.TGTruckService;
import by.base.main.service.TGUserService;
import by.base.main.util.SlotWebSocket;
import by.base.main.model.Message;
import by.base.main.model.TGTruck;
import io.github.dostonhamrakulov.InlineCalendarBuilder;
import io.github.dostonhamrakulov.InlineCalendarCommandUtil;
import io.github.dostonhamrakulov.LanguageEnum;

@Component
public class TelegramBotRouting extends TelegramLongPollingBot{
	
	public boolean isRunning = false;
	
	@Autowired
	public KeyboardMaker keyboardMaker;
	
	@Autowired
	public MainController mainController;
	
	@Autowired
	public TGTruckService tgTruckService;
	
	@Autowired
	public TGUserService tgUserService;
	
	@Autowired
	private SlotWebSocket slotWebSocket;
	
	private long idAdmin = 907699213;
//	private Map<Long, TGUser> users = new HashMap<Long, TGUser>(); // —é–∑–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—è–≤–ª—è—é—Ç –∞–≤—Ç–æ
	private List<Long> idAllUsers = new ArrayList<Long>(); // –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫ –±–æ—Ç—É —é–∑–µ—Ä—ã
	private Map<Long, String> idAdmins = new HashMap<Long, String>(); // –∞–¥–º–∏–Ω—ã
	
	private static final InlineCalendarBuilder inlineCalendarBuilder = new InlineCalendarBuilder(LanguageEnum.RU);
	private Map<Long, Integer> chatAndMessageIdMap = new HashMap<>();
	
	private String description = "–ü—Ä–∏–≤–µ—Ç—Å—Ç—Å–≤—É—é!\r\n"
			+ "–†–∞–∑–≤–æ–∑–î–æ–±—Ä–æ–Ω–æ–ºBot üöö\r\n"
			+ "\r\n"
			+ "üìã *–û–ø–∏—Å–∞–Ω–∏–µ*:\r\n"
			+ "–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞—è–≤–∏—Ç—å —Å–≤–æ—é –º–∞—à–∏–Ω—É (–∏ –Ω–µ –æ–¥–Ω—É) –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º –ª–æ–≥–∏—Å—Ç–∞–º.\r\n"
			+ "\r\n"
			+ "‚ú® *–§—É–Ω–∫—Ü–∏–∏*:\r\n"
			+ "- üóìÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É\r\n"
			+ "- ‚è≥ –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\r\n"
			+ "- üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞—è–≤–ª–µ–Ω–Ω—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏\r\n";
	
	@Override
	public void onUpdateReceived(Update update) {
		try {
			if(update.hasMessage() && update.getMessage().hasContact()){	
				long chatId = update.getMessage().getChatId();
				TGUser user = new TGUser();
				user.setChatId(chatId);
				user.setTelephone(update.getMessage().getContact().getPhoneNumber());
				user.setCommand("/login");
				tgUserService.saveOrUpdateTGUser(user);
				sendMessage(chatId, "–ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã");
			}
			if(update.hasMessage() && update.getMessage().hasLocation()){
				long chatId = update.getMessage().getChatId();
				sendMessage(chatId, update.getMessage().getLocation().toString());
			}
			
			//–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CallbackData —Ç.–µ. —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–∑–æ–¥—è—Ç —Å –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
			if(update.hasCallbackQuery()){
//				System.out.println("CallbackData -> " + update.getCallbackQuery().getData());
//				System.out.println("CallbackData.getMessage().getChatId() -> " + update.getCallbackQuery().getMessage().getChatId());
				
				long chatId = update.getCallbackQuery().getMessage().getChatId();
				//—Ç—É—Ç –¥–æ—Å—Ç–∞—ë–º id —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
				long messageId = update.getCallbackQuery().getMessage().getMessageId();
				String message = update.getCallbackQuery().getMessage().getText();
				String data = update.getCallbackQuery().getData();
				TGUser user = tgUserService.getTGUserByChatId(chatId);
				String nextText = null;
				switch (data.split("_")[0]) {
				case "CAL": //–æ—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
					 SendMessage sendMessage = new SendMessage();
				        sendMessage.setChatId(chatId);

				        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è		        
				        if (InlineCalendarCommandUtil.isInlineCalendarClicked(update)) {
				            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–µ—Å—è—Ü–∞–º
				            if (InlineCalendarCommandUtil.isCalendarNavigationButtonClicked(update)) {
//				                sendMessage.setReplyMarkup(inlineCalendarBuilder.build(update));
				                EditMessageText newMessage = EditMessageText.builder()
				    		            .chatId(chatId)
				    		            .messageId(Math.toIntExact(messageId))
				    		            .text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É")
				    		            .replyMarkup(inlineCalendarBuilder.build(update)) // —Å—é–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–ª–µ—Ç, –¥–∞–ª—å—à–µ –¥–µ–ª–∞–µ—Ç –∫–ª–∞–≤–∞
				    		            .build();
				    		        try {
				    		            execute(newMessage);
				    		        } catch (TelegramApiException e) {
				    		            e.printStackTrace();
				    		        }
				                // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
				                return;
				            }

				            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
				            LocalDate localDate = InlineCalendarCommandUtil.extractDate(update);
				            if(localDate.isBefore(LocalDate.now())) {//–µ—Å–ª–∏ —é–∑–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—è–≤–∏—Ç—å –ø—Ä–æ—à–ª—ã–º —á–∏—Å–ª–æ–º
				            	String currentText = "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –¥–æ "+LocalDate.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))+"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"; 
				            	String newText = "–ï—â–µ —Ä–∞–∑ : <b>–Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –¥–æ "+LocalDate.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))+"</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É"; // –í–∞—à –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
				            	EditMessageText newMessage = null;
				            	if(message.equals(currentText)) {
				            		newMessage = EditMessageText.builder()
				        		            .chatId(chatId)
				        		            .messageId(Math.toIntExact(messageId))
				        		            .text(newText)
				        		            .replyMarkup(inlineCalendarBuilder.build(update))
				        		            .parseMode("HTML")
				        		            .build();
				            	}else {
				            		newMessage = EditMessageText.builder()
				        		            .chatId(chatId)
				        		            .messageId(Math.toIntExact(messageId))
				        		            .text(currentText)
				        		            .replyMarkup(inlineCalendarBuilder.build(update))
				        		            .build();
				            	}
				            	
			        		        try {
			        		            execute(newMessage);
			        		        } catch (TelegramApiException e) {
			        		            e.printStackTrace();
			        		        }
			                    return;
				            }
				            
				            TGUser userForTruck = tgUserService.getTGUserByChatId(chatId);
		                	userForTruck.setCommand("/numtruck");
		                	userForTruck.setDateOrderTruckOptimization(Date.valueOf(localDate));
		                	nextText = localDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
		                	tgUserService.saveOrUpdateTGUser(userForTruck);
		                	EditMessageText newMessage = EditMessageText.builder()
            				.chatId(chatId)
            				.messageId(Math.toIntExact(messageId))
            				.text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ ")
            				.build();
            		try {
            			execute(newMessage);
            		} catch (TelegramApiException e) {
            			e.printStackTrace();
            		}
				        }
				        
				        SendMessage sendKeyboard = new SendMessage();      //—Å–ª–µ–¥–æ–º –∫–∏–¥–∞–µ–º  –∫–ª–∞–≤—É –¥–ª—è —é–∑–µ—Ä–æ–≤          	
				        sendKeyboard.setChatId(chatId);
				        sendKeyboard.setReplyMarkup(keyboardMaker.getMainCancelKeyboard()); //—Å–ª–µ–¥–æ–º –∫–∏–¥–∞–µ–º  –∫–ª–∞–≤—É –¥–ª—è —é–∑–µ—Ä–æ–≤
				        sendKeyboard.setText("–ù–∞ " + nextText + ":");
				        try {
				        	execute(sendKeyboard);
				        } catch (TelegramApiException e) {
				        	// TODO Auto-generated catch block
				        	e.printStackTrace();
				        }
				        
				        
					return;
				case "cancelTruck" :
					
					TGTruck tgTruckForDelete = tgTruckService.getTGTruckByChatNumTruckStrict(data.split("_")[1], Date.valueOf(data.split("_")[2]), user);
					
					if(tgTruckForDelete.getStatus() == 50) {
						EditMessageText newMessage = EditMessageText.builder()
	        		            .chatId(chatId)
	        		            .messageId(Math.toIntExact(messageId))
	        		            .parseMode("HTML")
	        		            .text("–ú–∞—à–∏–Ω–∞ <b>" + tgTruckForDelete.getNumTruck() + "</b> —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –ª–æ–≥–∏—Å—Ç–∏–∫–∏")
	        		            .build();
						try {
        		            execute(newMessage);
        		        } catch (TelegramApiException e) {
        		            e.printStackTrace();
        		        }
						
						
						return;
					}else {
						Message messageObject = new Message("TGBotRouting", "tgBot", null, "200", tgTruckService.getTGTruckByChatNumTruckStrict(data.split("_")[1], Date.valueOf(data.split("_")[2]), user).toJSON(), null, "delete");
						slotWebSocket.sendMessage(messageObject);
						tgTruckService.deleteTGTruckByNumTruck(data.split("_")[1], Date.valueOf(data.split("_")[2]));	
						user.removeTrucksForBot(data.split("_")[1]);
						
						DeleteMessage deleteMessage = new DeleteMessage();
						deleteMessage.setChatId(chatId);  // –£–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
						deleteMessage.setMessageId(Math.toIntExact(messageId));  // –£–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
						tgUserService.saveOrUpdateTGUser(user);
						try {
						    execute(deleteMessage);  // –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
						} catch (TelegramApiException e) {
						    e.printStackTrace();
						}
						return;
					}
					
					
					
					
				case "editTruck" :
					System.out.println("—Ç—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ");
					break;
					
				case "copyTruck" :
					System.out.println("—Ç—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ");
					break;

				default:
					break;
				}
				
				
				
				
				switch (user.getCommand()) {
				case "/setpall":
					String numTruck = data.split("_")[0];
					String pall = data.split("_")[1];
//					TGTruck truck = tgTruckService.getTGTruckByChatNumTruck(numTruck, user);
					TGTruck truck = new TGTruck();
					if(user.getDateOrderTruckOptimization() != null) {
						truck.setDateRequisition(user.getDateOrderTruckOptimization());
					}else {
						truck.setDateRequisition(Date.valueOf(LocalDate.now().plusDays(1)));
					}
					truck.setNumTruck(numTruck);
					truck.setPall(Integer.parseInt(pall));
					truck.setChatIdUserTruck(user.getChatId());
					user.putTrucksForBot(numTruck, truck);	
					tgTruckService.saveOrUpdateTGTruck(truck);
					user.setValidityTruck(numTruck); // —Å—é–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
					//—Å–æ–∑–¥–∞–ª–∏ –º–∞—à–∏–Ω—É, –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –Ω–æ–º–µ—Ä –∏ –∑–∞–ø–∏—Å–∞–ª–∏ —Å–∫–æ–ª—å–∫–æ –ø–∞–ª–ª–µ—Ç.
					
					user.setCommand("/setweigth");
					tgUserService.saveOrUpdateTGUser(user);
					//—Ç—É—Ç –¥–æ—Å—Ç–∞—ë–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—è–µ–º –µ–≥–æ
//					long messageId = update.getCallbackQuery().getMessage().getMessageId();
					String answer1 = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å –∞–≤—Ç–æ";
			        EditMessageText newMessage = EditMessageText.builder()
			            .chatId(chatId)
			            .messageId(Math.toIntExact(messageId))
			            .text(answer1)
			            .replyMarkup(keyboardMaker.getWeigthKeyboard(pall.trim())) // —Å—é–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–ª–µ—Ç, –¥–∞–ª—å—à–µ –¥–µ–ª–∞–µ—Ç –∫–ª–∞–≤–∞
			            .build();
			        try {
			            execute(newMessage);
			        } catch (TelegramApiException e) {
			            e.printStackTrace();
			        }
			        return;
				case "/settype":
					String numTruckForType = data.split("_")[0];
					String type = data.split("_")[1];
					
					TGTruck truckForType = tgTruckService.getTGTruckByChatNumTruck(numTruckForType, user);
					truckForType.setTypeTrailer(type);
					truckForType.setCompanyName(user.getCompanyName());
					
					
					tgTruckService.saveOrUpdateTGTruck(truckForType);					
					user.setCommand("/setdriver");
					tgUserService.saveOrUpdateTGUser(user);
					
					String text = "–¢–∏–ø –ø—Ä–∏–Ω—è—Ç. –£–∫–∞–∂–∏—Ç–µ –§–ò–û –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è";
					
//					long messageIdType = update.getCallbackQuery().getMessage().getMessageId();
					EditMessageText messageProof = EditMessageText.builder()
							.chatId(chatId)
							.messageId(Math.toIntExact(messageId))
							.text(text)
							.build();   
	        		try {
						execute(messageProof);
					} catch (TelegramApiException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	        		return;				
				case "/setweigth":
					TGUser userForTruck3 = tgUserService.getTGUserByChatId(chatId);
					TGTruck truckForWeigth = tgTruckService.getTGTruckByChatNumTruck(userForTruck3.getValidityTruck(), userForTruck3);
					
	            	truckForWeigth.setCargoCapacity(data.split("_")[0]);
	            	userForTruck3.setCommand("/settype");
	            	userForTruck3.putTrucksForBot(userForTruck3.getValidityTruck(), truckForWeigth);
	            	tgUserService.saveOrUpdateTGUser(userForTruck3);
	            	tgTruckService.saveOrUpdateTGTruck(truckForWeigth);            	
	            	
					EditMessageText messageWeigthEdit = EditMessageText.builder()
							.chatId(chatId)
							.messageId(Math.toIntExact(messageId))
							.text("–í–µ—Å –ø—Ä–∏–Ω—è–ª. \n–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ")
							.replyMarkup(keyboardMaker.getTypeTruckKeyboard(truckForWeigth.getNumTruck()))
							.build();   
	        		try {
						execute(messageWeigthEdit);
					} catch (TelegramApiException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	        		return;
				case "/proofTruck":
					String numTruckProof = data.split("_")[0];
					String answer = data.split("_")[1];
					
					TGTruck proofTruck = tgTruckService.getTGTruckByChatNumTruck(numTruckProof, user);
					proofTruck.setStatus(10);
					
					tgTruckService.saveOrUpdateTGTruck(proofTruck);					
					SendMessage sendKeyboard = new SendMessage();                	
	            	sendKeyboard.setChatId(chatId);
	            	
					if(answer.equals("yes")) {					
						Message messageObject = new Message("TGBotRouting", "tgBot", null, "200", proofTruck.toJSON(), null, "add");
						slotWebSocket.sendMessage(messageObject);
						
						user.setCommand(null);
						user.setValidityTruck(null);
						user.setDateOrderTruckOptimization(null);
						tgUserService.saveOrUpdateTGUser(user);
						//—Å—é–¥–∞ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∞—à–∏–Ω—ã (5 —Å—Ç–∞—Ç—É—Å)
						EditMessageText messageEditYes = EditMessageText.builder()
								.chatId(chatId)
								.messageId(Math.toIntExact(messageId))
								.text("–ú–∞—à–∏–Ω–∞ –∑–∞—è–≤–ª–µ–Ω–∞!")
								.build();   
		        		try {
							execute(messageEditYes); // –º–µ–Ω—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
						} catch (TelegramApiException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						sendKeyboard.setReplyMarkup(keyboardMaker.getMainKeyboard()); //—Å–ª–µ–¥–æ–º –∫–∏–¥–∞–µ–º  –∫–ª–∞–≤—É –¥–ª—è —é–∑–µ—Ä–æ–≤
						
					}else {
						tgTruckService.deleteTGTruckByNumTruck(numTruckProof, user);
						user.removeTrucksForBot(numTruckProof);
						user.setCommand(null);
						user.setValidityTruck(null);
						tgUserService.saveOrUpdateTGUser(user);
						EditMessageText messageEditNo = EditMessageText.builder()
								.chatId(chatId)
								.messageId(Math.toIntExact(messageId))
								.text("–ú–∞—à–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
								.build();   
		        		try {
							execute(messageEditNo); // –º–µ–Ω—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
						} catch (TelegramApiException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						sendKeyboard.setReplyMarkup(keyboardMaker.getMainKeyboard()); //—Å–ª–µ–¥–æ–º –∫–∏–¥–∞–µ–º  –∫–ª–∞–≤—É –¥–ª—è —é–∑–µ—Ä–æ–≤
					}
					sendKeyboard.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
					try {
						execute(sendKeyboard);
					} catch (TelegramApiException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					return;
					
				default:
					break;
				} 			
			}
			long chatId = update.getMessage().getChatId();
	        if(update.hasMessage() && update.getMessage().hasText()){
	            String messageText = update.getMessage().getText();            
	            String onlyText = new String(update.getMessage().getText());     
	            TGUser user = tgUserService.getTGUserByChatId(chatId);
	            
	            if(user != null && user.getCommand() != null && messageText.split("~")[0].equals("/start")) {
	            	TGUser user1 = tgUserService.getTGUserByChatId(chatId);
	            	user1.setCommand(null);
	            	tgUserService.saveOrUpdateTGUser(user1);
	            }
	            
	            if(user != null && user.getCommand() != null && !messageText.split("~")[0].equals("/start")) {
	            	messageText = user.getCommand()+"~"+messageText;
	            }
	            
//	            System.out.println(messageText + " idChat = " + chatId);
	            String command;
	            if(messageText.split("~").length > 1 && messageText.split("~")[1].equals("–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")) {
	            	command = messageText.split("~")[1];
	            }else {
	            	command = messageText.split("~")[0];
	            }
	            
	            
	            System.err.println(command);
	            switch (command.toLowerCase()){
	                case "/start": 
	                	SendMessage sendKeyboard = new SendMessage();                	
	                	sendKeyboard.setChatId(chatId);
						if(user != null) {
							sendKeyboard.setText("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é " + user.getCompanyName() + "!");
							sendKeyboard.setReplyMarkup(keyboardMaker.getMainKeyboard()); // –∫–ª–∞–≤–∞ –¥–ª—è —é–∑–µ—Ä–æ–≤
						}else {		
							sendKeyboard.setText(description);
							sendKeyboard.enableMarkdown(true);
		                	sendKeyboard.setReplyMarkup(keyboardMaker.getStartKeyboard()); // –∫–ª–∞–≤–∞ —Å–æ –≤—Ö–æ–¥–æ–º	
						}                	
	            		try {
							execute(sendKeyboard);
						} catch (TelegramApiException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	                    break;
	                case "/login": 
	                	String companyName = messageText.contains("~") ? messageText.split("~")[1] : messageText;
	                	companyName = companyName.replaceAll("\"", "");
	                	user.setCompanyName(companyName);
	                	user.setCommand(null);
	                	tgUserService.saveOrUpdateTGUser(user);
	                	SendMessage sendKeyboard2 = new SendMessage();
	                	sendKeyboard2.setText("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –±–æ—Ç –í–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª");
	                	sendKeyboard2.setChatId(chatId);
	                	sendKeyboard2.setReplyMarkup(keyboardMaker.getMainKeyboard()); // –∫–ª–∞–≤–∞ –¥–ª—è —é–∑–µ—Ä–æ–≤               	
	            		try {
							execute(sendKeyboard2);
						} catch (TelegramApiException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	                    break;
	                case "–∑–∞—è–≤–∏—Ç—å –º–∞—à–∏–Ω—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞": 
	                	user.setCommand("/numtruck");
	                	tgUserService.saveOrUpdateTGUser(user);
	                	SendMessage sendMessage = new SendMessage();
	            		sendMessage.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ: ");
	            		sendMessage.setChatId(chatId);
	            		sendMessage.setReplyMarkup(keyboardMaker.getMainCancelKeyboard());
	            		try {
	            			execute(sendMessage);
	            		} catch (TelegramApiException e) {
	            			System.err.println("execute –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª");
	            			e.printStackTrace();
	            			
	            		}
	                    break;
	                case "–æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ": 
	                	tgTruckService.deleteTGTruckByNumTruck(user.getValidityTruck(), user);
	                	user.setCommand(null);
	                	user.setValidityTruck(null);
	                	user.setDateOrderTruckOptimization(null);
	                	tgUserService.saveOrUpdateTGUser(user);
	                	SendMessage sendMessageCancel = new SendMessage();
	                	sendMessageCancel.setText("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã");
	                	sendMessageCancel.setChatId(chatId);
	                	sendMessageCancel.setReplyMarkup(keyboardMaker.getMainKeyboard());
	            		try {
	            			execute(sendMessageCancel);
	            		} catch (TelegramApiException e) {
	            			System.err.println("execute –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª");
	            			e.printStackTrace();
	            		}
	                    break;
	                case "/setdriver": 
	                	//—Ç—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –∏ –¥–∞—Ç–æ–π –∑–∞—è–≤–∫–∏
	                	TGTruck truckDriver = tgTruckService.getTGTruckByChatNumTruckStrict(user.getValidityTruck(), user.getDateOrderTruckOptimization() == null ? Date.valueOf(LocalDate.now().plusDays(1)) : user.getDateOrderTruckOptimization(), user);
	                	onlyText = onlyText.replaceAll("\"", "");
	                	truckDriver.setFio(onlyText);
	                	user.setCommand("/setinfo");
	                	tgUserService.saveOrUpdateTGUser(user);
	                	tgTruckService.saveOrUpdateTGTruck(truckDriver);
	                	//—Å–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ
	                	SendMessage messageChat = new SendMessage();
	                	messageChat.setChatId(chatId);                    
	                	messageChat.setText("–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç. \n–£–∫–∞–∂–∏—Ç–µ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—á–µ –º–∞—à–∏–Ω—ã (–≤—Ä–µ–º—è) –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");
	            		try {
							execute(messageChat);
						} catch (TelegramApiException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	                    break;
	                case "/setinfo": 
	                	//—Ç—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –∏ –¥–∞—Ç–æ–π –∑–∞—è–≤–∫–∏
	                	TGTruck truckInfo = tgTruckService.getTGTruckByChatNumTruckStrict(user.getValidityTruck(), user.getDateOrderTruckOptimization() == null ? Date.valueOf(LocalDate.now().plusDays(1)) : user.getDateOrderTruckOptimization(), user);
	                	onlyText = onlyText.replaceAll("\"", "");
	                	truckInfo.setOtherInfo(onlyText);
	                	user.setCommand("/proofTruck");
	                	user.setValidityTruck(null); // —Å—é–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–æ –∑–∞–ø–∏—Å—ã–≤–µ–º null —Ç.–∫. —Ç–∏–ø–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏
	                	tgUserService.saveOrUpdateTGUser(user);
	                	tgTruckService.saveOrUpdateTGTruck(truckInfo);
	                	//—Å–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ
	                	String textEnd;
						String dateNext = LocalDate.now().plusDays(1).format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
						if(user.getDateOrderTruckOptimization() != null) {
							textEnd = "–ó–∞—è–≤–ª—è–µ–º –º–∞—à–∏–Ω—É –Ω–∞ ("+user.getDateOrderTruckOptimization().toLocalDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))+")\n –ê–≤—Ç–æ: "+truckInfo.getTruckForBot();
							truckInfo.setDateRequisition(user.getDateOrderTruckOptimization());
						}else {
							textEnd = "–ó–∞—è–≤–ª—è–µ–º –º–∞—à–∏–Ω—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ("+dateNext+")\n –ê–≤—Ç–æ: "+truckInfo.getTruckForBot();
							truckInfo.setDateRequisition(LocalDate.now().plusDays(1));
						}
						
						SendMessage messageProof = SendMessage.builder()
								.chatId(chatId)
								.text(textEnd)
								.replyMarkup(keyboardMaker.getYesNoKeyboard(truckInfo.getNumTruck()))
								.build();   
		        		try {
							execute(messageProof);
						} catch (TelegramApiException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	                    break;
	                case "/numtruck": 
	                	String numTruck = messageText.split("~")[1];
	                	//—Ç—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –∏ –¥–∞—Ç–æ–π –∑–∞—è–≤–∫–∏
	                	TGTruck testTruck = tgTruckService.getTGTruckByChatNumTruckStrict(numTruck, user.getDateOrderTruckOptimization(), user);
	                	if(testTruck != null) {
		                	user.setCommand(null);
		                	user.setValidityTruck(null);
		                	user.setDateOrderTruckOptimization(null);
		                	tgUserService.saveOrUpdateTGUser(user);
		                	SendMessage sendMessageCancelExeption = new SendMessage();
		                	sendMessageCancelExeption.setText("–ú–∞—à–∏–Ω–∞ —Å –Ω–æ–º–µ—Ä–æ–º " + numTruck + " —É–∂–µ –∑–∞—è–≤–ª–µ–Ω–∞ –Ω–∞ " + testTruck.getDateRequisitionLocalDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")));
		                	sendMessageCancelExeption.setChatId(chatId);
		                	sendMessageCancelExeption.setReplyMarkup(keyboardMaker.getMainKeyboard());
		            		try {
		            			execute(sendMessageCancelExeption);
		            		} catch (TelegramApiException e) {
		            			System.err.println("execute –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª");
		            			e.printStackTrace();
		            		}
		            		return;
	                	}
	                	
	                	
	                	user.setCommand("/setpall");
	                	user.setValidityTruck(numTruck);
	                	tgUserService.saveOrUpdateTGUser(user);
	                	//—Å–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ
//	                	TGTruck tgTruckFirst = new TGTruck();
//	                	tgTruckFirst.setNumTruck(numTruck);
//	                	tgTruckFirst.setChatIdUserTruck(chatId);
//	                	tgTruckService.saveOrUpdateTGTruck(tgTruckFirst);
	                	
	                	SendMessage message = new SendMessage();
	                    message.setChatId(chatId);                    
	                    message.setText("–ù–æ–º–µ—Ä " + numTruck +" –ø—Ä–∏–Ω—è—Ç. \n–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ø–∞–ª–ª–µ—Ç –≤–º–µ—â–∞–µ—Ç –∞–≤—Ç–æ");
	            		message.setReplyMarkup(keyboardMaker.getPallMessageKeyboardNew(numTruck));
	            		try {
							execute(message);
						} catch (TelegramApiException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	            		return;
	                    
	                case "—Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞—è–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω":                	
	                	Map<String, TGTruck> filteredMap = user.getTrucksForBot();
	                	if(filteredMap == null ||filteredMap.isEmpty()) {
	                		SendMessage messageTruckList = new SendMessage();
	                    	messageTruckList.setChatId(chatId);
	                    	messageTruckList.setParseMode("HTML");  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º HTML
	                    	messageTruckList.setText("–ú–∞—à–∏–Ω—ã –∑–∞—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ (<b>" + LocalDate.now().plusDays(1).format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))+"</b>) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
	                		try {
	    						execute(messageTruckList);
	    					} catch (TelegramApiException e) {
	    						// TODO Auto-generated catch block
	    						e.printStackTrace();
	    					}
	                	}else {
	                		filteredMap.entrySet().stream()
		                    .filter(e -> e.getValue().getDateRequisitionLocalDate().equals(LocalDate.now().plusDays(1)) ||  e.getValue().getDateRequisitionLocalDate().equals(LocalDate.now()))
		                    .forEach(entry->{
	                			SendMessage messageTruckList = new SendMessage();
	                        	messageTruckList.setChatId(chatId);
	                        	messageTruckList.setParseMode("HTML");  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º HTML
	                        	messageTruckList.setText(entry.getValue().getTruckForBot() + " –Ω–∞ <b>" + entry.getValue().getDateRequisitionLocalDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))+"</b>");
	                        	messageTruckList.setReplyMarkup(keyboardMaker.getCancelDeleteEditKeyboard(entry.getKey(), entry.getValue().getDateRequisition()));	                        	
	                    		try {
	        						execute(messageTruckList);
	        					} catch (TelegramApiException e) {
	        						// TODO Auto-generated catch block
	        						e.printStackTrace();
	        					}
	                		});
	                	} 
	                    break;
	                case "—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω":  
	                	List<TGTruck> filteredMapAll = tgTruckService.getTGTruckByChatIdUserList(user.getChatId());
	                	if(filteredMapAll == null || filteredMapAll.isEmpty()) {
	                		SendMessage messageTruckList = new SendMessage();
	                    	messageTruckList.setChatId(chatId);
	                    	messageTruckList.setParseMode("HTML");  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º HTML
	                    	messageTruckList.setText("–ó–∞—è–≤–ª–µ–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
	                		try {
	    						execute(messageTruckList);
	    					} catch (TelegramApiException e) {
	    						// TODO Auto-generated catch block
	    						e.printStackTrace();
	    					}
	                	}else {
//	                		tgTruckService.getTGTruckByChatIdUserList(user.getChatId()).stream().forEach(entry->{                		
	                		filteredMapAll.stream()
	                		.filter(t-> t.getDateRequisition().toLocalDate().isAfter(LocalDate.now().minusDays(1)))
	                		.forEach(entry->{                		
		                    	SendMessage messageTruckList = new SendMessage();
		                    	messageTruckList.setChatId(chatId);   
		                    	messageTruckList.setParseMode("HTML");  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º HTML
		                    	messageTruckList.setText(entry.getTruckForBot() + " –Ω–∞ <b>" + entry.getDateRequisitionLocalDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))+"</b>");
		                    	messageTruckList.setReplyMarkup(keyboardMaker.getCancelDeleteEditKeyboard(entry.getNumTruck(), entry.getDateRequisition()));
		                		try {
		    						execute(messageTruckList);
		    					} catch (TelegramApiException e) {
		    						// TODO Auto-generated catch block
		    						e.printStackTrace();
		    					}
		                	});
	                	}	                	  
	                    break;
	                case "–∑–∞—è–≤–∏—Ç—å –º–∞—à–∏–Ω—É –Ω–∞ –¥–∞—Ç—É":
	                	SendMessage sendMessage1 = new SendMessage();
	                    sendMessage1.setChatId(chatId);
	                    sendMessage1.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É");
	                    sendMessage1.setReplyMarkup(inlineCalendarBuilder.build(update));
	                    
					try {
						execute(sendMessage1);
					} catch (TelegramApiException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
	                    break;
	             
	                case "/mail":
	                	if(idAdmins.get(chatId) != null) {
	                		sendMessageAll(messageText.split("~")[1]);
	                	}else {
	                		sendMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");    
	                	}                	
	                	break;
	                case "/addadmin":
	                case "/admin":
	                case "/addAdmin":
	                	if(chatId == idAdmin) {
	                		Long id = Long.parseLong(messageText.split("~")[1]);
	                		String name = messageText.split("~")[2];                		
	                		idAdmins.put(id, name);// /addAdmin~42523532523~–û–ª–µ–≥ –ü–∏–ø—á–µ–Ω–∫–æ
	                		serializableIdAdmins();
	                		sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º " + messageText.split("~")[2] + " –∏ id " + messageText.split("~")[1] + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"); 
	                	}else {
	                		sendMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");    
	                	}                	
	                	break;
	                case "/delAdmin":
	                	if(chatId == idAdmin) {
	                		Long id = Long.parseLong(messageText.split("~")[1]);               		
	                		String name = idAdmins.remove(id);// /delAdmin~42523532523
	                    	sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º " + name + " –∏ id " + id + " —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤");                		
	                    	serializableIdAdmins();
	                	}else {
	                		sendMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");    
	                	}                	
	                	break;
	                case "/help":
	                	if(chatId == idAdmin || idAdmins.containsKey(chatId)) {
	                    	sendMessage(chatId, "/mail~text\n/addAdmin~42523532523~–û–ª–µ–≥ –ü–∏–ø—á–µ–Ω–∫–æ\n/delAdmin~42523532523\n/id\n/admins\n/stop\n/stat - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"); 
	                	}else {
	                		sendMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", keyboardMaker.getMainKeyboard());    
	                	}                	
	                	break;
	                case "/id":
	            		sendMessage(chatId, chatId+"");            
	                	break;
	                case "/admins":
	                	if(chatId == idAdmin || idAdmins.containsKey(chatId)) {
	                		if(!idAdmins.isEmpty()) {
	                    		idAdmins.forEach((k,v) -> sendMessage(chatId, k+" - " + v));
	                    	}else {
	                    		sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç");
							}	
	                	}else {
	                		sendMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"); 
						}    
	                	break;

	                case "–∏–Ω—Ñ–æ":
	                	sendMessage(chatId,"–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã SpeedLogist. –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–∞–º."
	                			+ "\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ—Ç–∞.\n–ß—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\" –∏–ª–∏ –≤—ã–π–¥–µ—Ç–µ –∏–∑ –±–æ—Ç–∞");
	                	break;
	                case "/stop":
	                	if(chatId == 907699213) {
	                		super.onClosing();
	                	}                	
	                	break;

	                case "–ø–æ—à–µ–ª –Ω–∞ —Ö—É–π":
	                case "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π":
	                	sendMessage(chatId, "–ö–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ! \n–ë–æ—Ç –≤–Ω—ë—Å –í–∞—Å –≤ –Ω–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!", keyboardMaker.getMainKeyboard());              	
	                	break;
	                case "–ø–∏–∑–¥–∞":
	                	sendMessage(chatId, "–ö–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ! \n–ë–æ—Ç –≤–Ω—ë—Å –í–∞—Å –≤ –Ω–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!", keyboardMaker.getMainKeyboard());              	
	                	break;
	                case "—Ö—É–π":
	                	sendMessage(chatId, "–ó–∞–±–æ—Ä–æ–≤ –º–∞–ª–æ?! \n–ë–æ—Ç –≤–Ω—ë—Å –í–∞—Å –≤ –Ω–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!", keyboardMaker.getMainKeyboard());              	
	                	break;
	                case "–±–æ—Ç –≥–æ–≤–Ω–æ":
	                case "–ë–æ—Ç –≥–æ–≤–Ω–æ":
	                	sendMessage(chatId, "‚ï≠‚à©‚ïÆ (`-`) ‚ï≠‚à©‚ïÆ \n\n–ë–æ—Ç –≤–Ω—ë—Å –í–∞—Å –≤ –Ω–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!", keyboardMaker.getMainKeyboard());              	
	                	break;
	                case "—Å–æ—Å–∏":
	                	sendMessage(chatId, "–ß—Ç–æ —Å–æ—Å–∞—Ç—å?", keyboardMaker.getMainKeyboard());              	
	                	break;
	                case "—Å–æ—Å–∏ —Ö—É–π":
	                	sendMessage(chatId, "–ö–∞–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ! \n–ë–æ—Ç –≤–Ω—ë—Å –í–∞—Å –≤ –Ω–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!", keyboardMaker.getMainKeyboard());              	
	                	break;
	                case "–ª–æ—Ö":
	                	sendMessage(chatId, "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥!", keyboardMaker.getMainKeyboard());              	
	                	break;
	                case "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç":
	                case "–±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç":
	                case "–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç":
	                case "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç":
	                	sendMessage(chatId, "–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω.", keyboardMaker.getMainKeyboard());              	
	                	break;
	                case "–º—É–¥–∞–∫":
	                	sendMessage(chatId, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å —á—É–¥–∞–∫.", keyboardMaker.getMainKeyboard());              	
	                	break;
	                case "–ø–µ–¥–∏–∫":
	                case "–ø–∏–¥–æ—Ä":
	                case "–ø–∏–¥—Ä":
	                	sendMessage(chatId, "–ù–æ–≤—ã–π –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ SpeedLogist –ø—Ä–∏–Ω—è—Ç!", keyboardMaker.getMainKeyboard());              	
	                	sendMessage(chatId, "–ë–æ—Ç –≤–Ω—ë—Å –í–∞—Å –≤ –Ω–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!", keyboardMaker.getMainKeyboard());             	
	                	break;
	                default:
	                	SendMessage sendMessageUnknown  = new SendMessage();
	                	sendMessageUnknown.setText("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
	                	sendMessageUnknown.setChatId(chatId);
	                	sendMessageUnknown.setReplyMarkup(keyboardMaker.getMainKeyboard());
	            		try {
	            			execute(sendMessageUnknown);
	            		} catch (TelegramApiException e) {
	            			System.err.println("execute –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª");
	            			e.printStackTrace();
	            		}
	            }
	        }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public String getBotUsername() {
		return "DobronomRouting";
	}
	
	@Override
	public String getBotToken() {
		return "6742392768:AAGof2DXKQEmYDw5hdb6MxMAq1fgTufmR-Q";
	}
	
	@Override
	public void onRegister() {
		if(!isRunning) {
			super.onRegister();
			isRunning = true;
		}else {
			System.err.println("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
		}
	}
	
	public void sendMessage(long chatId, String textToSend, ReplyKeyboardMarkup replyKeyboardMarkup) {
		SendMessage sendMessage = new SendMessage();
		sendMessage.setText(textToSend);
		sendMessage.setChatId(chatId);
		sendMessage.setReplyMarkup(replyKeyboardMarkup);
		try {
			execute(sendMessage);
		} catch (TelegramApiException e) {
			System.err.println("execute –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª");
			e.printStackTrace();
			
		}
	}
	
	public void sendMessage(long chatId, String textToSend) {
		SendMessage sendMessage = new SendMessage();
		sendMessage.setText(textToSend);
		sendMessage.setChatId(chatId);
		sendMessage.setReplyMarkup(null);
		try {
			execute(sendMessage);
		} catch (TelegramApiException e) {
			System.err.println("execute –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª");
			e.printStackTrace();
			
		}
	}
	
	public void sendMessageForStart(long chatId, String textToSend) {
		SendMessage sendMessage = new SendMessage();
		sendMessage.setText(textToSend);
		sendMessage.setChatId(chatId);
//		sendMessage.setReplyMarkup(keyboardMaker.getMainMenuKeyboard());
		sendMessage.setReplyMarkup(keyboardMaker.getSecondMenuKeyboard());
		try {
			execute(sendMessage);
		} catch (TelegramApiException e) {
			System.err.println("execute –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª");
			e.printStackTrace();
			
		}
	}

	
	/**
	 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–ì –±–æ—Ç—É –≤—Å–µ–º –∫—Ç–æ –≤–æ—à–µ–ª
	 * @param chatId
	 * @param textToSend
	 */
	public void sendMessageAll(String textToSend) {
		for (Long id : idAllUsers) {
			SendMessage sendMessage = new SendMessage(id.toString(),textToSend);
			try {
				execute(sendMessage);
			} catch (TelegramApiException e) {
				e.printStackTrace();
				
			}
		}
	}
	
	private void startCommandReceived(long chatId, String name) {
        String answer = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å " + name + "–ù–æ–≤—ã–π –±–æ—Ç!";
        sendMessageForStart(chatId, answer);
        
    }
	
	private static final String usersDir = "resources/others/telegramm/route/Users.ser";
	
	/**
	 * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è users
	 */
//	private void serializableUsers() {
//		//–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
//        File fileTest= new File(mainController.path + "resources/others/telegramm/");
//        if (!fileTest.exists()) {
//            fileTest.mkdir();
//            File fileTest2= new File(mainController.path + "resources/others/telegramm/route/");
//	        if (!fileTest2.exists()) {
//	            fileTest2.mkdir();
//	        }
//        }
//		try {
//			FileOutputStream fos = new FileOutputStream(mainController.path + usersDir);
//                  ObjectOutputStream oos = new ObjectOutputStream(fos);
//                  oos.writeObject(this.users);
//                  oos.close();
//                  fos.close();
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//	}
	
	/**
	 * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ idAllUsers
	 */
//	private void serializableIdAllUsers() {
//		try {
//			FileOutputStream fos = new FileOutputStream(mainController.path + "resources/others/telegrammIdAllUser.ser");
//                  ObjectOutputStream oos = new ObjectOutputStream(fos);
//                  oos.writeObject(this.idAllUsers);
//                  oos.close();
//                  fos.close();
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//	}
	
	/**
	 * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ idAdmins
	 */
	private void serializableIdAdmins() {
		try {
			FileOutputStream fos = new FileOutputStream(mainController.path + "resources/others/telegrammIdAdmins.ser");
                  ObjectOutputStream oos = new ObjectOutputStream(fos);
                  oos.writeObject(this.idAdmins);
                  oos.close();
                  fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ idAllUsers
	 */
//	public void deSerializableIdAllUsers() {
//		try {
//			FileInputStream fis = new FileInputStream(mainController.path + "resources/others/telegrammIdAllUser.ser");
//		         ObjectInputStream ois = new ObjectInputStream(fis);
//		         this.idAllUsers = (ArrayList) ois.readObject();
//		         ois.close();
//		         fis.close();
//			}catch (Exception e) {
//				e.printStackTrace();
//			}
//	}
	
	/**
	 * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ idUsers
	 */
//	public void deSerializableIdUsers() {
//		try {
//			FileInputStream fis = new FileInputStream(mainController.path + usersDir);
//		         ObjectInputStream ois = new ObjectInputStream(fis);
//		         this.users =  (Map<Long, User>) ois.readObject();
//		         ois.close();
//		         fis.close();
//			}catch (Exception e) {
//				e.printStackTrace();
//			}
//	}
	
//	public void deSerializableIdUsers() {
//	    // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
//	    String fullPath = mainController.path + usersDir;
//
//	    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
//	    File userFile = new File(fullPath);
//	    File userDirectory = userFile.getParentFile();
//	    
//	    if (!userDirectory.exists()) {
//	        userDirectory.mkdirs(); // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//	    }
//
//	    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
//	    if (!userFile.exists()) {
//	        try {
//	            userFile.createNewFile(); // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//	            // –ú–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø—É—Å—Ç—ã–º Map
//	            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(userFile))) {
//	                oos.writeObject(new HashMap<Long, TGUser>());
//	            }
//	        } catch (IOException e) {
//	            e.printStackTrace();
//	        }
//	    }
//
//	    // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
//	    try (FileInputStream fis = new FileInputStream(fullPath);
//	         ObjectInputStream ois = new ObjectInputStream(fis)) {
//	        this.users = (Map<Long, TGUser>) ois.readObject();
//	    } catch (Exception e) {
//	        e.printStackTrace();
//	    }
//	}
	
	/**
	 * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ idAdmins
	 */
	public void deSerializableIdAdmins() {
		try {
			FileInputStream fis = new FileInputStream(mainController.path + "resources/others/telegrammIdAdmins.ser");
		         ObjectInputStream ois = new ObjectInputStream(fis);
		         this.idAdmins = (Map<Long, String>) ois.readObject();
		         ois.close();
		         fis.close();
			}catch (Exception e) {
				e.printStackTrace();
			}
	}
	

}
