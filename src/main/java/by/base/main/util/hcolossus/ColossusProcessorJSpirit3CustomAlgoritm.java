package by.base.main.util.hcolossus;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.graphhopper.jsprit.core.algorithm.PrettyAlgorithmBuilder;
import com.graphhopper.jsprit.core.algorithm.SearchStrategy;
import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
import com.graphhopper.jsprit.core.algorithm.acceptor.GreedyAcceptance;
import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
import com.graphhopper.jsprit.core.algorithm.module.RuinAndRecreateModule;
import com.graphhopper.jsprit.core.algorithm.recreate.AbstractInsertionStrategy;
import com.graphhopper.jsprit.core.algorithm.recreate.BestInsertion;
import com.graphhopper.jsprit.core.algorithm.recreate.InsertionBuilder;
import com.graphhopper.jsprit.core.algorithm.recreate.InsertionStrategyBuilder;
import com.graphhopper.jsprit.core.algorithm.recreate.RegretInsertion;
import com.graphhopper.jsprit.core.algorithm.ruin.RuinStrategy;
import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
import com.graphhopper.jsprit.core.algorithm.selector.SelectBest;
import com.graphhopper.jsprit.core.algorithm.state.StateManager;
import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
import com.graphhopper.jsprit.core.problem.Location;
import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
import com.graphhopper.jsprit.core.problem.job.Job;
import com.graphhopper.jsprit.core.problem.job.Service;
import com.graphhopper.jsprit.core.problem.job.Shipment;
import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
import com.graphhopper.jsprit.core.problem.vehicle.FiniteFleetManagerFactory;
import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
import com.graphhopper.jsprit.core.problem.vehicle.VehicleFleetManager;
import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
import com.graphhopper.jsprit.core.util.Solutions;
import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
import by.base.main.model.Shop;
import by.base.main.util.GraphHopper.ExampleManyRouteCustomAlgorinm.MyBestStrategy;
import by.base.main.util.hcolossus.algorithm.ClusterConstraint;
import by.base.main.util.hcolossus.algorithm.MaxDistanceConstraint;
import by.base.main.util.hcolossus.algorithm.MaxDistanceConstraintCritical;
import by.base.main.util.hcolossus.pojo.Solution;
import by.base.main.util.hcolossus.service.MatrixMachine;
import by.base.main.util.hcolossus.service.ShopMachine;
import smile.clustering.KMeans;

/**
 * –í–µ—Ä—Å–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ Jspirit —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –≤—Å—Ç–∞–≤–∫–∏
 * 
 */
@Component
public class ColossusProcessorJSpirit3CustomAlgoritm {

	@Autowired
	private ShopMachine shopMachine;

	@Autowired
	private MatrixMachine matrixMachine;
	
	private static final double MAX_JUMP_DISTANCE_KM = 40.0;   // –ø–æ—Ä–æ–≥ "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ" —Å–∫–∞—á–∫–∞
    private static final double PENALTY_MULTIPLIER = 40.0;      // –º–Ω–æ–∂–∏—Ç–µ–ª—å —à—Ç—Ä–∞—Ñ–∞


	/**
	 * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ –ø–µ—Ä–≤–æ—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
	 * 
	 * @param jsonMainObject
	 * @param shopList
	 * @param pallHasShops
	 * @param stock
	 * @param koeff          - –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä—É–±–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞, —Ç.–∫. –ø—Ä–æ—Ü–µ–Ω—Ç
	 *                       –ø–µ—Ä–µ–±—Ä–æ–±–µ–≥–∞
	 * @param algoritm       - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ <br>
	 *                       * fullLoad - –ø–æ–¥–±–æ—Ä –º–∞—à–∏–Ω—ã —Ç–∞–∫, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
	 *                       –∑–∞–≥—Ä—É–∑–∏—Ç—å <br>
	 *                       * noFullLoad - –ø–æ–¥–±–æ—Ä –º–∞—à–∏–Ω—ã —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
	 *                       –∑–∞–≥—Ä—É–∂–∞—Ç—å –µ–µ
	 * @return
	 * @throws Exception
	 */
	public Solution run(JSONObject jsonMainObject, List<Integer> shopList, List<Double> pallHasShops,
			List<Integer> tonnageHasShops, Integer stock, Double koeff, String algoritm,
			Map<Integer, String> shopsWithCrossDockingMap, Integer maxShopInWay, List<Double> pallReturn,
			List<Integer> weightDistributionList, Map<Integer, Shop> allShop) throws Exception {
		// –±–ª–æ–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
		// –∑–∞–ø–æ–ª–Ω—è–µ–º static –º–∞—Ç—Ä–∏—Ü—É. –ü—É—Å—Ç—å —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–∞–º
		matrixMachine.createMatrixHasList(shopList, stock, allShop);

		// 1. –ü–æ–ª—É—á–∞–µ–º targetStock –∏ –≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
		Shop targetStock = allShop.get(stock);
		List<Shop> shops = new ArrayList<>(allShop.values());
		List<Shop> shopsForOptimization = shopMachine.prepareShopList5Parameters(shopList, pallHasShops,
				tonnageHasShops, stock, shopsWithCrossDockingMap, pallReturn, weightDistributionList, shops);
		
		
		Location depotLocation = Location.newInstance(Double.parseDouble(targetStock.getLat()),
				Double.parseDouble(targetStock.getLng()));
		List<Service> shopsService = createServicesFromShops(shopsForOptimization);

		VehicleRoutingTransportCosts costMatrix = prepairMatrixForJspirit(stock, targetStock, shopsService);

		List<VehicleImpl> vehicleImpls = createVehiclesFromJson(jsonMainObject, depotLocation);

		// 1. –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ VRP
		VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
		vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
		vrpBuilder.setRoutingCost(costMatrix); // –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
		

		// 2. –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–∞—à–∏–Ω—ã
		for (VehicleImpl vehicle : vehicleImpls) {
			vrpBuilder.addVehicle(vehicle);
		}

		// 3. –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã (–º–∞–≥–∞–∑–∏–Ω—ã)
		for (Service shipment : shopsService) {
			vrpBuilder.addJob(shipment);
		}

		// 4. –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É
		VehicleRoutingProblem problem = vrpBuilder.build();

		// 4 —Å–æ–∑–¥–∞—ë–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
		StateManager stateManager = new StateManager(problem);
		ConstraintManager constraintManager = new ConstraintManager(problem, stateManager);
		
//		constraintManager.addConstraint(new MaxDistanceConstraintCritical(40.0, costMatrix, depotLocation), ConstraintManager.Priority.CRITICAL);	
//		constraintManager.addConstraint(new MaxDistanceConstraint(40.0, 15.0, costMatrix, depotLocation));

		// 1. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç–∏
		constraintManager.addLoadConstraint(); // –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –≤—Å–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è–º
		
//		VehicleRoutingAlgorithm algorithm = Jsprit.Builder.newInstance(problem)
//			    .setStateAndConstraintManager(stateManager, constraintManager)
//			    .setProperty(Jsprit.Parameter.THREADS, "4")
//			    .setProperty(Jsprit.Parameter.CONSTRUCTION, "FARTHEST_INSERTION") // –ù–∞—á–Ω—ë—Ç —Å —Å–∞–º—ã—Ö –¥–∞–ª—å–Ω–∏—Ö —Ç–æ—á–µ–∫
//			    .setProperty(Jsprit.Parameter.ITERATIONS, "4000")
//			    
//			    .setProperty(Jsprit.Strategy.RADIAL_BEST, "0.5")  // –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
//			    .setProperty(Jsprit.Strategy.CLUSTER_BEST, "0.5")  // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Äî –∫–ª–∞—Å—Ç–µ—Ä—ã
////			    .setProperty(Jsprit.Strategy.RANDOM_BEST, "0.1")  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
//			    .buildAlgorithm();
		VehicleRoutingAlgorithm algorithm = createAlgorithm(problem, costMatrix, depotLocation);

		// 6. –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á—ë—Ç
		Collection<VehicleRoutingProblemSolution> solutions = algorithm.searchSolutions();

		// 7. –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ
		VehicleRoutingProblemSolution bestSolution = Solutions.bestOf(solutions);

		// 8. –ü–µ—á–∞—Ç–∞–µ–º –æ—Ç—á—ë—Ç
		SolutionPrinter.print(problem, bestSolution, SolutionPrinter.Print.VERBOSE);
//		new Plotter(problem, bestSolution).plot("D:\\result/route.png", "Route");
		exportSolutionToCSV(problem, bestSolution, shopsService, depotLocation, "D:\\result", targetStock);

		return null;

	}
	
	public static VehicleRoutingAlgorithm createAlgorithm(final VehicleRoutingProblem vrp, VehicleRoutingTransportCosts costMatrix, Location depotLocation) {

		VehicleFleetManager fleetManager = new FiniteFleetManagerFactory(vrp.getVehicles()).createFleetManager();
	    StateManager stateManager = new StateManager(vrp);
	    ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
	    
//	    constraintManager.addConstraint(new MaxDistanceConstraintCritical(40.0, costMatrix, depotLocation), ConstraintManager.Priority.CRITICAL);
//	    constraintManager.addConstraint(new MaxDistanceConstraint(40.0, 15.0, costMatrix, depotLocation));

	    MyBestStrategy myBestStrategy = new MyBestStrategy(vrp, fleetManager, stateManager, constraintManager);
	    SolutionCostCalculator objectiveFunction = getObjectiveFunction(vrp);

	    // üëá —Å–æ–∑–¥–∞—ë–º "RecreateModule", –≥–¥–µ ruin = –ø—É—Å—Ç–æ	    
	    RuinAndRecreateModule onlyInsertModule = new RuinAndRecreateModule("insertOnly", myBestStrategy, new RuinStrategy() {
			
	    	private final List<RuinListener> listeners = new ArrayList<>();
			@Override
			public Collection<Job> ruin(Collection<VehicleRoute> vehicleRoutes) {
				return Collections.emptyList();
			}
			
			@Override
			public void removeListener(RuinListener ruinListener) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public Collection<RuinListener> getListeners() {
				// TODO Auto-generated method stub
				return listeners;
			}
			
			@Override
			public void addListener(RuinListener ruinListener) {
				// TODO Auto-generated method stub
				
			}
		});

	    SearchStrategy myOnlyStrategy = new SearchStrategy(
	        "onlyInsert",
	        new SelectBest(),
	        new GreedyAcceptance(1),
	        objectiveFunction
	    );

	    myOnlyStrategy.addModule(onlyInsertModule);
	    
	    BestInsertion bestInsertion = (BestInsertion) new InsertionBuilder(vrp, fleetManager, stateManager, constraintManager)
	    	    .setInsertionStrategy(InsertionBuilder.Strategy.BEST)
	    	    .considerFixedCosts(1000.0) // –∏–ª–∏ —Ç–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
	    	    .setAllowVehicleSwitch(true)
	    	    .build();
	    RegretInsertion regretInsertion = (RegretInsertion) new InsertionBuilder(vrp, fleetManager, stateManager, constraintManager)
	    	    .setInsertionStrategy(InsertionBuilder.Strategy.REGRET)
	    	    .considerFixedCosts(1000.0)  // –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
	    	    .setAllowVehicleSwitch(true)
	    	    .build();
	    SearchStrategy bestStrategy = new SearchStrategy(
	    	    "myBestStrategy",
	    	    new SelectBest(),
	    	    new GreedyAcceptance(1),
	    	    getObjectiveFunction(vrp)  // —Ç–≤–æ—è —Ü–µ–ª—å
	    	);
	    bestStrategy.addModule(new RuinAndRecreateModule("bestInsertionModule", regretInsertion, new RuinStrategy() {
	        @Override
	        public Collection<Job> ruin(Collection<VehicleRoute> vehicleRoutes) {
	            return Collections.emptyList(); // –±–µ–∑ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
	        }
	        @Override public void removeListener(RuinListener l) {}
	        @Override public Collection<RuinListener> getListeners() { return new ArrayList<>(); }
	        @Override public void addListener(RuinListener l) {}
	    }));
	    

	    VehicleRoutingAlgorithm vra = PrettyAlgorithmBuilder
	    	.newInstance(vrp, fleetManager, stateManager, constraintManager)
	    	.addCoreStateAndConstraintStuff()
	        .withStrategy(myOnlyStrategy, 1.0)
//	        .constructInitialSolutionWith(myBestStrategy, objectiveFunction)
	        .constructInitialSolutionWith(bestInsertion, objectiveFunction)
	        .build();
	    
	    //constraintManager.addLoadConstraint();
	    //constraintManager.addTimeWindowConstraint();

	    return vra;
	}
	
	private static SolutionCostCalculator getObjectiveFunction(final VehicleRoutingProblem vrp) {
        return new SolutionCostCalculator() {


            @Override
            public double getCosts(VehicleRoutingProblemSolution solution) {
                SolutionAnalyser analyser = new SolutionAnalyser(vrp,solution,new TransportDistance() {
					@Override
					public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
						return vrp.getTransportCosts().getTransportCost(from, to,0.,null,null);
					}
                });
                return analyser.getVariableTransportCosts() + solution.getUnassignedJobs().size() * 500.;
            }

        };
    }

	/**
	 * –ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è Jspirit
	 * @param stock
	 * @param targetStock
	 * @param shopsService
	 * @return
	 */
	private VehicleRoutingTransportCosts prepairMatrixForJspirit(Integer stock, Shop targetStock,
			List<Service> shopsService) {
		// 1. –°–æ–∑–¥–∞—ë–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ‚Üí ID
		Map<Location, Integer> coordinateToId = new HashMap<>();

		// –î–ª—è –¥–µ–ø–æ
		Location depotCoord = Location.newInstance(Double.parseDouble(targetStock.getLat()),
				Double.parseDouble(targetStock.getLng()));
		coordinateToId.put(depotCoord, stock); // stock = ID –¥–µ–ø–æ

		// –î–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
		for (Service shipment : shopsService) {
			Location shopCoord = shipment.getLocation();
			Integer shopId = Integer.parseInt(shipment.getName());
			coordinateToId.put(shopCoord, shopId);
		}

		// 2. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
		VehicleRoutingTransportCostsMatrix.Builder matrixBuilder = VehicleRoutingTransportCostsMatrix.Builder
				.newInstance(false); // –µ—Å–ª–∏ true - –º–∞—Ç—Ä–∏—Ü–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è. —Ç.–µ. –≤ –æ–¥–Ω—É –∏ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ
										// —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ!!!

		for (Location fromCoord : coordinateToId.keySet()) {
			for (Location toCoord : coordinateToId.keySet()) {
				Integer fromId = coordinateToId.get(fromCoord);
				Integer toId = coordinateToId.get(toCoord);

				String matrixKey = fromId + "-" + toId;
				double distance = matrixMachine.matrix.getOrDefault(matrixKey, Double.POSITIVE_INFINITY);
				double time = matrixMachine.matrixTime.getOrDefault(matrixKey, Double.POSITIVE_INFINITY);
				matrixBuilder.addTransportDistance(fromCoord.getCoordinate() + "", // –í–∞–∂–Ω–æ! –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
						toCoord.getCoordinate() + "", distance / 1000.0);
				double timeInSeconds = time / 1000.0;
				matrixBuilder.addTransportTime(fromCoord.getCoordinate() + "", // –í–∞–∂–Ω–æ! –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
						toCoord.getCoordinate() + "", timeInSeconds);

				System.out.println(matrixKey + " === " + fromCoord.getCoordinate() + " - " + toCoord.getCoordinate()
						+ " - " + (distance / 1000.0) + " time = " + timeInSeconds + " —Å–µ–∫");
			}
		}

		VehicleRoutingTransportCosts costMatrix = matrixBuilder.build();
		return costMatrix;
	}
	
	public Map<Integer, List<Integer>> clusterShopsKMeans(Map<Integer, Shop> allShops, List<Integer> shopList, int k) {
	    List<double[]> coords = new ArrayList<>();
	    List<Integer> ids = new ArrayList<>();

	    for (Integer id : shopList) {
	        Shop shop = allShops.get(id);
	        double lat = Double.parseDouble(shop.getLat());
	        double lng = Double.parseDouble(shop.getLng());
	        coords.add(new double[]{lat, lng});
	        ids.add(id);
	    }

	    double[][] data = coords.toArray(new double[0][]);
	    KMeans km = KMeans.fit(data, k); // k ‚Äî —á–∏—Å–ª–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤

	    Map<Integer, List<Integer>> result = new HashMap<>();
	    for (int i = 0; i < data.length; i++) {
	        int cluster = km.y[i];
	        result.computeIfAbsent(cluster, c -> new ArrayList<>()).add(ids.get(i));
	    }

	    return result;
	}

	/**
	 * –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ—à–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –≤ CSV —Ñ–∞–π–ª
	 * 
	 * @param problem       –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
	 * @param solution      –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
	 * @param services      —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ (–º–∞–≥–∞–∑–∏–Ω–æ–≤)
	 * @param depotLocation –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–µ–ø–æ
	 * @param filePath      –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞
	 */
	private void exportSolutionToCSV(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
			List<Service> services, Location depotLocation, String filePath, Shop stock) {
		// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CSV
		List<String[]> csvData = prepareCSVData(problem, solution, services, depotLocation, stock);

		// –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
		writeCSVFile(csvData, filePath);
	}

	/**
	 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CSV —Ñ–∞–π–ª–∞
	 */
	private List<String[]> prepareCSVData(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
			List<Service> services, Location depotLocation, Shop stock) {
		List<String[]> csvData = new ArrayList<>();
		double totalDistance = 0.0;
		// –ó–∞–≥–æ–ª–æ–≤–æ–∫ CSV
		csvData.add(new String[] { "–ú–∞—Ä—à—Ä—É—Ç", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "ID —Ç–æ—á–∫–∏", "–¢–∏–ø —Ç–æ—á–∫–∏", "–í–µ—Å, –∫–≥", "–ü–∞–ª–ª–µ—Ç—ã", "–®–∏—Ä–æ—Ç–∞",
				"–î–æ–ª–≥–æ—Ç–∞", "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å–ª–µ–¥. —Ç–æ—á–∫–∏, –∫–º" });

		// –°–æ–±–∏—Ä–∞–µ–º ID —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
		Set<String> assignedShopIds = new HashSet<>();
		for (VehicleRoute route : solution.getRoutes()) {
			for (TourActivity activity : route.getActivities()) {
				if (activity instanceof TourActivity.JobActivity) {
					assignedShopIds.add(((TourActivity.JobActivity) activity).getJob().getId());
				}
			}
		}

		// –°–æ–±–∏—Ä–∞–µ–º ID –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω
		Set<String> usedVehicleIds = solution.getRoutes().stream().map(route -> route.getVehicle().getId())
				.collect(Collectors.toSet());

		// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
		for (VehicleRoute route : solution.getRoutes()) {
			Vehicle vehicle = route.getVehicle();
			String vehicleId = vehicle.getId();

			// –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
			double maxLoadWeight = vehicle.getType().getCapacityDimensions().get(0);
			double maxPallets = vehicle.getType().getCapacityDimensions().get(1);
			double usedWeight = 0;
			double usedPallets = 0;

			// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
			csvData.add(new String[] { "–ú–∞—Ä—à—Ä—É—Ç " + vehicleId, vehicleId, vehicleId, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "", "",
					String.valueOf(depotLocation.getCoordinate().getX()),
					String.valueOf(depotLocation.getCoordinate().getY()), "" });

			// –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ - –¥–µ–ø–æ
			csvData.add(new String[] { "–ú–∞—Ä—à—Ä—É—Ç " + vehicleId, vehicleId, String.valueOf(stock.getNumshop()),
					"–î–µ–ø–æ (—Å—Ç–∞—Ä—Ç)", "", "", String.valueOf(depotLocation.getCoordinate().getX()),
					String.valueOf(depotLocation.getCoordinate().getY()), "" });

			TourActivity prevActivity = route.getStart();
			double distanceFromDepot = 0;
			boolean firstActivity = true;

			for (TourActivity activity : route.getActivities()) {
				if (activity instanceof TourActivity.JobActivity) {
					Job job = ((TourActivity.JobActivity) activity).getJob();
					String shopId = job.getId();

					// –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–≤–∏—Å (–º–∞–≥–∞–∑–∏–Ω) –ø–æ ID
					Service shopService = findServiceById(services, shopId);
					Location shopLocation = shopService != null ? shopService.getLocation() : null;

					// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
					double distance = problem.getTransportCosts().getTransportCost(prevActivity.getLocation(),
							activity.getLocation(), 0, null, null);
					totalDistance = totalDistance + distance;

					// –î–ª—è –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–µ–ø–æ
					if (firstActivity) {
						distanceFromDepot = problem.getTransportCosts().getTransportCost(depotLocation,
								activity.getLocation(), 0, null, null);
//						totalDistance = totalDistance + distanceFromDepot;
						firstActivity = false;
					}

					// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
					int jobWeight = job.getSize().get(0);
					int jobPallets = job.getSize().get(1);
					usedWeight += jobWeight;
					usedPallets += jobPallets;

					// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
					csvData.add(new String[] { "–ú–∞—Ä—à—Ä—É—Ç " + vehicleId, vehicleId, shopId, "–ú–∞–≥–∞–∑–∏–Ω",
							String.valueOf(jobWeight), String.valueOf(jobPallets),
							shopLocation != null ? String.valueOf(shopLocation.getCoordinate().getX()) : "",
							shopLocation != null ? String.valueOf(shopLocation.getCoordinate().getY()) : "",
							firstActivity ? String.format("%.2f", distanceFromDepot)
									: String.format("%.2f", distance) });

					prevActivity = activity;
				}
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ –¥–æ –¥–µ–ø–æ
			double distanceToDepot = 0;
			if (prevActivity != null) {
				distanceToDepot = problem.getTransportCosts().getTransportCost(prevActivity.getLocation(),
						depotLocation, 0, null, null);
				totalDistance = totalDistance + distanceToDepot;
			}

			// –î–µ–ø–æ –∫–∞–∫ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
			csvData.add(new String[] { "–ú–∞—Ä—à—Ä—É—Ç " + vehicleId, vehicleId, String.valueOf(stock.getNumshop()),
					"–î–µ–ø–æ (—Ñ–∏–Ω–∏—à)", "", "", String.valueOf(depotLocation.getCoordinate().getX()),
					String.valueOf(depotLocation.getCoordinate().getY()), String.format("%.2f", distanceToDepot) });

			// –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
			csvData.add(new String[] { "–ú–∞—Ä—à—Ä—É—Ç " + vehicleId, vehicleId, "–ò–¢–û–ì–û", "",
					String.format("%.0f/%.0f", usedWeight, maxLoadWeight),
					String.format("%.0f/%.0f", usedPallets, maxPallets), "", "", "" });

			// –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
			csvData.add(new String[] { "", "", "", "", "", "", "", "", "" });
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö
		List<Service> unassignedShops = services.stream().filter(service -> !assignedShopIds.contains(service.getId()))
				.collect(Collectors.toList());

		if (!unassignedShops.isEmpty()) {
			csvData.add(new String[] { "–ù–ï–†–ê–°–ü–†–ï–î–ï–õ–Å–ù–ù–´–ï –ú–ê–ì–ê–ó–ò–ù–´", "", "", "", "", "", "", "", "" });
			for (Service shop : unassignedShops) {
				csvData.add(new String[] { "–ù–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω", "", shop.getId(), "–ú–∞–≥–∞–∑–∏–Ω",
						String.valueOf(shop.getSize().get(0)), String.valueOf(shop.getSize().get(1)),
						String.valueOf(shop.getLocation().getCoordinate().getX()),
						String.valueOf(shop.getLocation().getCoordinate().getY()), "" });
			}
			csvData.add(new String[] { "", "", "", "", "", "", "", "", "" });
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω–∞—Ö
		List<Vehicle> unusedVehicles = problem.getVehicles().stream()
				.filter(vehicle -> !usedVehicleIds.contains(vehicle.getId())).collect(Collectors.toList());

		if (!unusedVehicles.isEmpty()) {
			csvData.add(new String[] { "–ù–ï–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ï –ú–ê–®–ò–ù–´", "", "", "", "", "", "", "", "" });
			for (Vehicle vehicle : unusedVehicles) {
				csvData.add(new String[] { "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞", vehicle.getId(), "", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "", "",
						String.valueOf(depotLocation.getCoordinate().getX()),
						String.valueOf(depotLocation.getCoordinate().getY()), "" });
			}
			csvData.add(new String[] { "", "", "", "", "", "", "", "", "" });
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∏—Ç–æ–≥–∏
		addSummaryInfo(csvData, solution, totalDistance);

		return csvData;
	}


	/**
	 * –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ ID
	 */
	private Service findServiceById(List<Service> services, String id) {
		return services.stream().filter(s -> s.getName().equals(id)).findFirst().orElse(null);
	}

	/**
	 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é
	 */
	private void addSummaryInfo(List<String[]> csvData, VehicleRoutingProblemSolution solution, double totalDistance) {
		int totalShops = solution.getRoutes().stream().mapToInt(
				r -> (int) r.getActivities().stream().filter(a -> a instanceof TourActivity.JobActivity).count()).sum();

		csvData.add(new String[] { "–û–ë–©–ò–ï –ò–¢–û–ì–ò", "", "", "", "", "", "", "", "" });
		csvData.add(new String[] { "–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤", String.valueOf(solution.getRoutes().size()), "", "", "", "", "",
				"", "" });
		csvData.add(new String[] { "–í—Å–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤", String.valueOf(totalShops), "", "", "", "", "", "", "" });
		csvData.add(
				new String[] { "–û–±—â–∏–π –ø—Ä–æ–±–µ–≥, –∫–º", String.format("%.2f", totalDistance), "", "", "", "", "", "", "" });
	}

	/**
	 * –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
	 */
	private void writeCSVFile(List<String[]> data, String filePath) {
		File file = new File(filePath);

		try {
			// –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
			File parentDir = file.getParentFile();
			if (parentDir != null && !parentDir.exists()) {
				if (!parentDir.mkdirs()) {
					System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: " + parentDir.getAbsolutePath());
					// –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					filePath = System.getProperty("user.home") + File.separator + "routes_report.csv";
					file = new File(filePath);
				}
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
			if (file.exists() && !file.canWrite()) {
				System.err.println("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: " + filePath);
				filePath = System.getProperty("user.home") + File.separator + "routes_report.csv";
				file = new File(filePath);
			}

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
			try (PrintWriter writer = new PrintWriter(
					new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8))) {
				writer.write('\ufeff'); // BOM –¥–ª—è UTF-8

				for (String[] row : data) {
					writer.println(String.join(";", row));
				}

				System.out.println("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + file.getAbsolutePath());
			}
		} catch (IOException e) {
			System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: " + e.getMessage());

			// –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
			try {
				String tempPath = System.getProperty("java.io.tmpdir") + File.separator + "routes_report.csv";
				try (PrintWriter writer = new PrintWriter(
						new OutputStreamWriter(new FileOutputStream(tempPath), StandardCharsets.UTF_8))) {
					writer.write('\ufeff');
					for (String[] row : data) {
						writer.println(String.join(";", row));
					}
					System.out.println("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: " + tempPath);
				}
			} catch (IOException ex) {
				System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: " + ex.getMessage());
			}
		}
	}

	/**
	 * –°–û–∑–¥–∞—ë–º –∞–≤—Ç–æ –ø–æ json
	 * 
	 * @param jsonMainObject
	 * @return
	 */
	public static List<VehicleImpl> createVehiclesFromJson(JSONObject jsonMainObject, Location depotLocation) {
		List<VehicleImpl> vehicles = new ArrayList<>();
		// –ü–∞—Ä—Å–∏–º JSON
		JSONArray carsArray = (JSONArray) jsonMainObject.get("cars");

		for (int i = 0; i < carsArray.size(); i++) {
			JSONObject carJson = (JSONObject) carsArray.get(i);

			// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
			String carName = carJson.get("carName").toString();
			int carCount = Integer.parseInt(carJson.get("carCount").toString());
			int maxTonnage = Integer.parseInt(carJson.get("maxTonnage").toString());
			int maxPall = Integer.parseInt(carJson.get("maxPall").toString());

			// –°–æ–∑–¥–∞–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
			VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance(carName)
					.addCapacityDimension(0, maxTonnage) // –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å (–∫–≥)
					.addCapacityDimension(1, maxPall) // –∫–æ–ª-–≤–æ –ø–∞–ª–ª–µ—Ç
					.setCostPerDistance(1.0) // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–∞–∂–¥—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä
					.setFixedCost(100) // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—à–∏–Ω—ã (—Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞)
					// –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–≤–∏–∂–µ–Ω–∏—è ‚Äî –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
				    .setCostPerTransportTime(1.0);  // –í–∞–∂–Ω–æ –¥–ª—è —É—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ä—à—Ä—É—Ç–∞!

			VehicleType vehicleType = vehicleTypeBuilder.build();

			// –°–æ–∑–¥–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
			for (int j = 1; j <= carCount; j++) {
				String vehicleId = String.format("%s_%d", carName, j);

				VehicleImpl.Builder vehicleBuilder = VehicleImpl.Builder.newInstance(vehicleId)
						.setReturnToDepot(true)
						.setEarliestStart(0) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã ‚Äî —Å 0 —Å–µ–∫—É–Ω–¥ (00:00)
						 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è ‚Äî —á–µ—Ä–µ–∑ 10 —á–∞—Å–æ–≤
					    .setLatestArrival(15 * 3600)  // 15 —á * 3600 = 36000 —Å–µ–∫—É–Ω–¥
						.setStartLocation(depotLocation) // –¥–µ–ø–æ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
						.setType(vehicleType);

				vehicles.add(vehicleBuilder.build());
			}
		}

		return vehicles;
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Shipment !!! (–∑–∞–∫–∞–∑–æ–≤) –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤. –í–∞–∂–Ω–æ —á—Ç–æ Shipment —ç—Ç–æ
	 * –ó–ê–ë–û–† –ò –î–û–°–¢–ê–í–ö–ê!!!!
	 * 
	 * @param shopsForOptimization —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
	 * @param depotLocation        –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–µ–ø–æ (–æ—Ç–∫—É–¥–∞ –∑–∞–±–∏—Ä–∞–µ–º –≥—Ä—É–∑)
	 * @return —Å–ø–∏—Å–æ–∫ Shipment –¥–ª—è VRP
	 */
	public static List<Shipment> createShipmentsFromShops(List<Shop> shopsForOptimization, Location depotLocation) {
		List<Shipment> shipments = new ArrayList<>();
		int currentIndex = 1;
		for (Shop shop : shopsForOptimization) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –º–∞–≥–∞–∑–∏–Ω–∞ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
			if (shop.getLat() == null || shop.getLng() == null || shop.getWeight() == null
					|| shop.getNeedPall() == null) {
				continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
			}

			try {
				// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞
				double lat = Double.parseDouble(shop.getLat());
				double lng = Double.parseDouble(shop.getLng());
				Location deliveryLocation = Location.newInstance(lat, lng);

				Integer str = currentIndex++;

				// –°–æ–∑–¥–∞–µ–º Shipment (–∑–∞–∫–∞–∑)
				Shipment.Builder shipmentBuilder = Shipment.Builder.newInstance("shop_" + shop.getNumshop())
						.setName(shop.getNumshop() + "").addSizeDimension(0, shop.getWeight()) // –≤–µ—Å (–∫–≥)
						.addSizeDimension(1, shop.getNeedPall().intValue()) // –ø–∞–ª–ª–µ—Ç—ã (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
						.setPickupLocation(depotLocation) // –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ –¥–µ–ø–æ
						.setDeliveryLocation(deliveryLocation); // –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω

				// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å:
				// shipmentBuilder.setDeliveryTimeWindow(TimeWindow.newInstance(9*3600,
				// 18*3600));

				shipments.add(shipmentBuilder.build());
			} catch (NumberFormatException e) {
				System.err.println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∞–≥–∞–∑–∏–Ω–∞ " + shop.getNumshop());
			}
		}

		return shipments;
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Service !!! (–∑–∞–∫–∞–∑–æ–≤) –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤. –¢–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–∫–∞!
	 * 
	 * @param shopsForOptimization
	 * @return
	 */
	public static List<Service> createServicesFromShops(List<Shop> shopsForOptimization) {
		List<Service> services = new ArrayList<>();

		for (Shop shop : shopsForOptimization) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –º–∞–≥–∞–∑–∏–Ω–∞ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
//	        if (shop.getLat() == null || shop.getLng() == null || shop.getWeight() == null
//	                || shop.getNeedPall() == null) {
//	            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
//	        }

			try {
				// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)
				double lat = Double.parseDouble(shop.getLat());
				double lng = Double.parseDouble(shop.getLng());
				Location deliveryLocation = Location.newInstance(lat, lng);

				// –°–æ–∑–¥–∞–µ–º Service (–ø—Ä–æ—Å—Ç–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞)
				Service service = Service.Builder.newInstance(shop.getNumshop() + "").setName(shop.getNumshop() + "")
						.addSizeDimension(0, shop.getWeight()) // –≤–µ—Å (–∫–≥)
						.addSizeDimension(1, shop.getNeedPall().intValue()) // –ø–∞–ª–ª–µ—Ç—ã
						.setLocation(deliveryLocation) // —Ç–æ—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–±–µ–∑ –∑–∞–±–æ—Ä–∞!)
						.setServiceTime(900)  // 15 –º–∏–Ω—É—Ç
						.build();

				services.add(service);
			} catch (NumberFormatException e) {
				System.err.println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∞–≥–∞–∑–∏–Ω–∞ " + shop.getNumshop());
			}
		}

		return services;
	}

}