import { AG_GRID_LOCALE_RU } from "../../AG-Grid/ag-grid-locale-RU.js"
import { uiIcons } from "../../uiIcons.js"
import { dateHelper, disableButton, enableButton, getData } from "../../utils.js"
import {
	CargoCapacitySumStatusBarComponent,
	CountStatusBarComponent,
	PallSumStatusBarComponent,
	RowLegengStatusBarComponent
} from "../trucks/statusBar.js"
import { groupTrucksByDate, nextDate, prevDate, truckAdapter } from "../trucks/trucksUtils.js"
import { store } from "./store.js"
import { ajaxUtils } from '../../ajaxUtils.js'
import { snackbar } from "../../snackbar/snackbar.js"
import { getCarrierTGTrucksUrl, setTGTelNumberBaseUrl } from "../../globalConstants/urls.js"

const token = $("meta[name='_csrf']").attr("content")

const addNewTruckUrl = ''
const deleteTruckUrl = ''

const columnDefs = [
	{ headerName: 'id', field: 'idTGTruck', minWidth: 60, flex: 1, sort: 'desc', hide: true, },
	{ headerName: '–ù–æ–º–µ—Ä', field: 'numTruck', flex: 2, },
	{ headerName: '–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è', field: 'fio', flex: 4, wrapText: true, autoHeight: true, },
	// { headerName: '–ú–æ–¥–µ–ª—å', field: 'modelTruck', width: 150, },
	{ headerName: '–¢–∏–ø', field: 'typeTrailer', flex: 2, },
	{ headerName: '–¢–æ–Ω–Ω–∞–∂', field: 'cargoCapacity', flex: 1, cellClass: 'px-1 text-center font-weight-bold fs-1rem', },
	{ headerName: '–ü–∞–ª–ª–µ—Ç—ã', field: 'pall', flex: 1, cellClass: 'px-1 text-center font-weight-bold fs-1rem', },
	{ headerName: '–î–æ–ø. –∏–Ω—Ñ-—è', field: 'otherInfo', flex: 4, wrapText: true, autoHeight: true,},
]

const gridOptions = {
	columnDefs: columnDefs,
	defaultColDef: {
		headerClass: 'px-2',
		cellClass: 'px-1 text-center',
		flex: 3,
		resizable: true,
		lockPinned: true,
		suppressMenu: true,
		sortable: true,
		filter: true,
		floatingFilter: true,
		wrapHeaderText: true,
		autoHeaderHeight: true,
	},
	rowClassRules: {
		'light-green-row': params => params.node.data.status === 50,
		'light-orange-row': params => params.node.data.secondRound,
	},
	getRowId: (params) => params.data.idTGTruck,
	animateRows: true,
	// rowSelection: 'multiple',
	suppressDragLeaveHidesColumns: true,
	enableBrowserTooltips: true,
	localeText: AG_GRID_LOCALE_RU,
	getContextMenuItems: getContextMenuItems,
	overlayNoRowsTemplate: '<span class="h3">–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –∑–∞—è–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ –∞–≤—Ç–æ</span>',
	statusBar: {
		statusPanels: [
			{ statusPanel: RowLegengStatusBarComponent, align: 'left', },
			{ statusPanel: CountStatusBarComponent, statusPanelParams: null, },
			{ statusPanel: PallSumStatusBarComponent, statusPanelParams: null, },
			{ statusPanel: CargoCapacitySumStatusBarComponent, statusPanelParams: null, },
		],
	},
}

document.addEventListener('DOMContentLoaded', async () => {
	// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≤—è–∑–∏ —Å —Ç–≥ –±–æ—Ç–æ–º
	checkTGBotLink()

	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	await init()

	// –ø–æ–ª–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
	const currentDateInput = document.querySelector('#currentDate')
	// –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–∞—Ç—ã –≤–ø–µ—Ä–µ–¥
	const datePrevBtn = document.querySelector('#datePrev')
	// –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞–∑–∞–¥
	const dateNextBtn = document.querySelector('#dateNext')
	// —Ç–∞–±–ª–∏—Ü–∞
	const gridDiv = document.querySelector('#myGrid')
	// –∫–Ω–æ–ø–∫–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ
	const addNewTruckBtn = document.querySelector('#addNewTruckBtn')
	const addNewTrucksBtn = document.querySelector('#addNewTrucksBtn')
	// —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ
	const addNewTruckForm = document.querySelector('#addNewTruckForm')
	// —Ñ–æ—Ä–º–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ
	const copyTruckToDateForm = document.querySelector('#copyTruckToDateForm')
	// —Ñ–æ—Ä–º–∞ —É–∫–∞–∑–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–≥ –±–æ—Ç–∞
	const setTgTelNumberForm = document.querySelector('#setTgTelNumberForm')
	// –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–≥ –±–æ—Ç–∞
	const useTgBotBtn = document.querySelector('#useTgBot')
	const unuseTgBotBtn = document.querySelector('#unuseTgBot')
	useTgBotBtn && useTgBotBtn.addEventListener('click', (e) => {
		$('#confirmUsingTgBotModal').modal('hide')
		$('#setTgTelNumberModal').modal('show')
	})
	unuseTgBotBtn && unuseTgBotBtn.addEventListener('click', (e) => {
		$('#confirmUsingTgBotModal').modal('hide')
	})

	// —É—Å—Ç–∞–Ω–æ–≤–∞–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
	currentDateInput.value = store.getCurrentDate()
	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –¥–∞—Ç—ã
	currentDateInput.addEventListener('change', changeCurrentDateHandler)
	datePrevBtn.addEventListener('click', () => prevDate(currentDateInput))
	dateNextBtn.addEventListener('click', () => nextDate(currentDateInput))
	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ
	addNewTruckBtn.addEventListener('click', () => addNewTruck('single'))
	addNewTrucksBtn.addEventListener('click', () => addNewTruck('multiple'))
	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º
	addNewTruckForm.addEventListener('submit', addNewTruckHandler)
	copyTruckToDateForm.addEventListener('submit', copyTruckToDateHandler)
	setTgTelNumberForm.addEventListener('submit', setTgTelNumberHandler)

	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª–µ–π –¥–∞—Ç—ã –∑–∞—è–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ
	const dateRequisitionInputs = document.querySelectorAll('.dateRequisition')
	for (const input of dateRequisitionInputs) {
		input.min = store.getCurrentDate()
	}

	// –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	const trucks = store.getTrucksByCurrentDate()
	// —Ä–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü –º–∞—à–∏–Ω
	renderTable(gridDiv, gridOptions, trucks)

	$('#addNewTruckModal').on('hide.bs.modal', () => addNewTruckForm.reset())
	$('#copyTruckToDateModal').on('hide.bs.modal', () => copyTruckToDateForm.reset())
})



// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function init() {
	// –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–∞—Ö
	const truckData = await getTruckData()
	// –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
	const mappedTruckData = truckData.map(truckAdapter)
	// –º–∞—à–∏–Ω—ã –ø–æ –¥–∞—Ç–∞–º
	const trucks = groupTrucksByDate(mappedTruckData)
	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–∞—Ö –≤ —Å—Ç–æ—Ä
	store.setTrucks(trucks)
}

// –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–∞—Ö
async function getTruckData() {
	const response = await getData(getCarrierTGTrucksUrl)
	console.log("üöÄ ~ getTruckData ~ response:", response)
	if (!response) return []
	const trucksData = response.status === '200'
		? response.trucks ? response.trucks : []
		: []
	return trucksData
}
// –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–∞—à–∏–Ω–∞–º
async function updateTruckData() {
	await init()
	const trucks = store.getTrucksByCurrentDate()
	updateTableData(gridOptions, trucks)
}

// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≤—è–∑–∏ —Å —Ç–≥ –±–æ—Ç–æ–º
function checkTGBotLink() {
	const isTgLinkInput = document.querySelector('#isTgLink')
	const isTgLink = isTgLinkInput.value === 'true'
	if (isTgLink) return
	$('#confirmUsingTgBotModal').modal('show')
}

function renderTable(gridDiv, gridOptions, data) {
	new agGrid.Grid(gridDiv, gridOptions)

	if (!data || !data.length) {
		gridOptions.api.setRowData([])
		gridOptions.api.showNoRowsOverlay()
		return
	}

	const mappingData = getMappingData(data)

	gridOptions.api.setRowData(mappingData)
}
function updateTableData(gridOptions, data) {
	if (!data || !data.length) {
		gridOptions.api.setRowData([])
		gridOptions.api.showNoRowsOverlay()
		return
	}

	const mappingData = getMappingData(data)
	gridOptions.api.setRowData(mappingData)
}
function getMappingData(data,) {
	return data.map(truck => {
		return { ...truck }
	})
}
// –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Ç–∞–±–ª–∏—Ü—ã
function getContextMenuItems(params) {
	const rowNode = params.node
	if (!rowNode) return

	const truck = rowNode.data

	const result = [
		{
			name: `–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ –Ω–∞`,
			icon: uiIcons.files,
			subMenu: [
				{
					name: `–∑–∞–≤—Ç—Ä–∞`,
					action: () => copyTruck('toTomorrow', truck),
				},
				{
					name: `–¥–∞—Ç—É ...`,
					action: () => copyTruck('toDate', truck),
				},
			]
		},
		"separator",
		{
			name: `–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ`,
			action: () => deleteTruck(truck.idTGTruck),
			icon: uiIcons.trash,
		},
		"separator",
		"excelExport",
	]

	return result
}

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –¥–∞—Ç—ã
function changeCurrentDateHandler(e) {
	const date = e.target.value
	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
	store.setCurrentDate(date)
	// —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
	const trucks = store.getTrucksByCurrentDate()
	// –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
	updateTableData(gridOptions, trucks)
}

// –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ
function addNewTruck(formType) {
	const addNewTruckForm = document.querySelector('#addNewTruckForm')

	addNewTruckForm.formType.value = formType

	if (formType === 'single') {
		addNewTruckForm.count.value = 1
		addNewTruckForm.count.min = 1
		addNewTruckForm.count.readOnly = true
		addNewTruckForm.numTruck.disabled = false
		addNewTruckForm.fio.disabled = false
	} else {
		addNewTruckForm.count.min = 2
		addNewTruckForm.count.readOnly = false
		addNewTruckForm.numTruck.disabled = true
		addNewTruckForm.fio.disabled = true
	}

	$('#addNewTruckModal').modal('show')
}
// –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ
function copyTruck(type, truck) {
	if (type === 'toDate') {
		const copyTruckToDateForm = document.querySelector('#copyTruckToDateForm')
		setDataToForm(copyTruckToDateForm)
		$('#copyTruckToDateModal').modal('show')
	} else {
		const truckData = getNewTruckData(truck)
		const nextMs = new Date(store.getCurrentDate()).getTime() + dateHelper.DAYS_TO_MILLISECONDS
		const tomorrow = dateHelper.getDateForInput(nextMs)
		truckData.dateRequisition = tomorrow
		sendTruckData(truckData, 'copyTruckToTomorrow', null)
	}
	
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ
function addNewTruckHandler(e) {
	e.preventDefault()
	const form = e.target
	const formData = new FormData(form)
	const data = Object.fromEntries(formData)
	const truckData = getNewTruckData(data)
	sendTruckData(truckData, 'addTruck', e)
}
// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ –Ω–∞ –¥–∞—Ç—É
function copyTruckToDateHandler(e) {
	e.preventDefault()
	const form = e.target
	const formData = new FormData(form)
	const data = Object.fromEntries(formData)
	const truckData = getNewTruckData(data)
	sendTruckData(truckData, 'copyTruckToDate', e)
}
// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —É–∫–∞–∑–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–≥ –±–æ—Ç–∞
function setTgTelNumberHandler(e) {
	e.preventDefault()
	const form = e.target
	const formData = new FormData(form)
	const value = formData.get('tgTelNumber')
	if (!value) return
	const match = value.match(/\d+/g)
	const telNumber = match ? match.join('') : ''

	if (telNumber.length < 9) {
		snackbar.show('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω')
		return
	}

	disableButton(e.submitter)

	ajaxUtils.get({
		url: setTGTelNumberBaseUrl + telNumber,
		successCallback: (res) => {
			enableButton(e.submitter)
			if (res.status === '200') {
				$('#setTgTelNumberModal').modal('hide')
				updateTruckData()
				res.message && snackbar.show(res.message)
				return
			}

			if (res.status === '100') {
				const message = res.message ? res.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
				snackbar.show(message, 'error')
				return
			}
		},
		errorCallback: () => {
			enableButton(e.submitter)
		}
	})
}

// –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∑–∞—è–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ
function getNewTruckData(data) {
	return {
		dateRequisition: data.dateRequisition ? data.dateRequisition : null,
		count: data.count ? Number(data.count) : 1,
		numTruck: data.numTruck ? data.numTruck : null,
		typeTrailer: data.typeTrailer ? data.typeTrailer : null,
		cargoCapacity: data.cargoCapacity ? Number(data.cargoCapacity).toFixed(1) : null,
		pall: data.pall ? Number(data.pall) : null,
		fio: data.fio ? data.fio : null,
		otherInfo: data.otherInfo ? data.otherInfo : null,
	}
}

// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º—É
function setDataToForm(form, data) {
	for (const key in data) {
		if (form[key] && data[key]) {
			form[key].value = data[key]
		}
	}
}

// –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–∫–µ
function sendTruckData(truckData, method, submitEvent) {
	console.log("üöÄ ~ sendTruckData ~ truckData:", truckData)
	console.log("üöÄ ~ sendTruckData ~ method:", method)

	 const modal = method === 'addTruck'
	 	? $('#addNewTruckModal') : method === 'copyTruckToDate'
	 		? $('#copyTruckToDateModal') : null

	 disableButton(submitEvent.submitter)

	 ajaxUtils.postJSONdata({
	 	url: addNewTruckUrl,
	 	token: token,
	 	data: truckData,
	 	successCallback: async (res) => {
	 		enableButton(submitEvent.submitter)
	 		if (res.status === '200') {
	 			modal && modal.modal('hide')
	 			res.message && snackbar.show(res.message)
	 			// –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
	 			await updateTruckData()
	 			return
	 		}

	 		if (res.status === '100') {
	 			const message = res.message ? res.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
	 			snackbar.show(message)
	 			return
	 		}
	 		if (res.status === '105') {
	 			const message = res.message ? res.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
	 			snackbar.show(message)
	 			return
	 		}
	 	},
	 	errorCallback: () => {
	 		enableButton(submitEvent.submitter)
	 	}
	 })
}
// —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã
async function deleteTruck(truckId) {
	console.log("üöÄ ~ deleteTruck ~ truckId:", truckId)
	
	 const timeoutId = setTimeout(() => bootstrap5overlay.showOverlay(), 100)
	 const res = await getData(`${deleteTruckUrl}${truckId}`)
	 clearTimeout(timeoutId)
	 bootstrap5overlay.hideOverlay()

	 if (res && res.status === '200') {
	 	snackbar.show('–í—ã–ø–æ–ª–Ω–µ–Ω–æ!')
	 	// –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
	 	await updateTruckData()
	 } else {
	 	console.log(res)
	 	const message = res && res.message ? res.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
	 	snackbar.show(message)
	 }
}